
emulate_mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e54  08008e54  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e5c  08008e5c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  200001d8  0800903c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  0800903c  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e133  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae1  00000000  00000000  0003e33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00041e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  00043338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a132  00000000  00000000  00044700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189d4  00000000  00000000  0006e832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7af9  00000000  00000000  00087206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ecff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c8c  00000000  00000000  0017ed54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c18 	.word	0x08008c18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008c18 	.word	0x08008c18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <click>:

#define INPUT_SIZE 128
char inputBuf[INPUT_SIZE];
int inputPos = 0;

void click() {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t *)"Click!\r\n", 8, HAL_MAX_DELAY);
 800056c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000570:	2208      	movs	r2, #8
 8000572:	490e      	ldr	r1, [pc, #56]	; (80005ac <click+0x44>)
 8000574:	480e      	ldr	r0, [pc, #56]	; (80005b0 <click+0x48>)
 8000576:	f003 fe1d 	bl	80041b4 <HAL_UART_Transmit>

	mouse_report[0] = 0b001;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <click+0x4c>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, mouse_report, MOUSE_REPORT_SIZE);
 8000580:	2205      	movs	r2, #5
 8000582:	490c      	ldr	r1, [pc, #48]	; (80005b4 <click+0x4c>)
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <click+0x50>)
 8000586:	f005 fedd 	bl	8006344 <USBD_HID_SendReport>
	HAL_Delay(50);
 800058a:	2032      	movs	r0, #50	; 0x32
 800058c:	f000 fc6c 	bl	8000e68 <HAL_Delay>

	mouse_report[0] = 0b000;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <click+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, mouse_report, MOUSE_REPORT_SIZE);
 8000596:	2205      	movs	r2, #5
 8000598:	4906      	ldr	r1, [pc, #24]	; (80005b4 <click+0x4c>)
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <click+0x50>)
 800059c:	f005 fed2 	bl	8006344 <USBD_HID_SendReport>
	HAL_Delay(50);
 80005a0:	2032      	movs	r0, #50	; 0x32
 80005a2:	f000 fc61 	bl	8000e68 <HAL_Delay>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	08008c30 	.word	0x08008c30
 80005b0:	200002a4 	.word	0x200002a4
 80005b4:	200001f4 	.word	0x200001f4
 80005b8:	20000378 	.word	0x20000378

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b0      	sub	sp, #192	; 0xc0
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fc11 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f997 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa19 	bl	8000a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ce:	f000 f9e7 	bl	80009a0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005d2:	f007 f8a7 	bl	8007724 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n\r\nGoing to 0,0\r\n", 18, HAL_MAX_DELAY);
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005da:	2212      	movs	r2, #18
 80005dc:	49ba      	ldr	r1, [pc, #744]	; (80008c8 <main+0x30c>)
 80005de:	48bb      	ldr	r0, [pc, #748]	; (80008cc <main+0x310>)
 80005e0:	f003 fde8 	bl	80041b4 <HAL_UART_Transmit>

  for (int i = 0; i < 2048 / MOVE_DELTA; i++) {
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80005ea:	e012      	b.n	8000612 <main+0x56>
  	  mouse_report[1] = (int8_t)-MOVE_DELTA;
 80005ec:	4bb8      	ldr	r3, [pc, #736]	; (80008d0 <main+0x314>)
 80005ee:	22f6      	movs	r2, #246	; 0xf6
 80005f0:	705a      	strb	r2, [r3, #1]
  	  mouse_report[2] = (int8_t)-MOVE_DELTA;
 80005f2:	4bb7      	ldr	r3, [pc, #732]	; (80008d0 <main+0x314>)
 80005f4:	22f6      	movs	r2, #246	; 0xf6
 80005f6:	709a      	strb	r2, [r3, #2]
  	  USBD_HID_SendReport(&hUsbDeviceFS, mouse_report, MOUSE_REPORT_SIZE);
 80005f8:	2205      	movs	r2, #5
 80005fa:	49b5      	ldr	r1, [pc, #724]	; (80008d0 <main+0x314>)
 80005fc:	48b5      	ldr	r0, [pc, #724]	; (80008d4 <main+0x318>)
 80005fe:	f005 fea1 	bl	8006344 <USBD_HID_SendReport>
  	  HAL_Delay(MOVE_DELAY);
 8000602:	2012      	movs	r0, #18
 8000604:	f000 fc30 	bl	8000e68 <HAL_Delay>
  for (int i = 0; i < 2048 / MOVE_DELTA; i++) {
 8000608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800060c:	3301      	adds	r3, #1
 800060e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000616:	2bcb      	cmp	r3, #203	; 0xcb
 8000618:	dde8      	ble.n	80005ec <main+0x30>
  }

  int curx = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  int cury = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac


  HAL_UART_Transmit(&huart2, (uint8_t *)"At 0,0\r\n", 8, HAL_MAX_DELAY);
 8000626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800062a:	2208      	movs	r2, #8
 800062c:	49aa      	ldr	r1, [pc, #680]	; (80008d8 <main+0x31c>)
 800062e:	48a7      	ldr	r0, [pc, #668]	; (80008cc <main+0x310>)
 8000630:	f003 fdc0 	bl	80041b4 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart2, (uint8_t*)"Type coords: ", 13, HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000638:	220d      	movs	r2, #13
 800063a:	49a8      	ldr	r1, [pc, #672]	; (80008dc <main+0x320>)
 800063c:	48a3      	ldr	r0, [pc, #652]	; (80008cc <main+0x310>)
 800063e:	f003 fdb9 	bl	80041b4 <HAL_UART_Transmit>
	inputPos = 0;
 8000642:	4ba7      	ldr	r3, [pc, #668]	; (80008e0 <main+0x324>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]

	do {
		HAL_UART_Receive(&huart2, &inputBuf[inputPos], 1, HAL_MAX_DELAY);
 8000648:	4ba5      	ldr	r3, [pc, #660]	; (80008e0 <main+0x324>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4aa5      	ldr	r2, [pc, #660]	; (80008e4 <main+0x328>)
 800064e:	1899      	adds	r1, r3, r2
 8000650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000654:	2201      	movs	r2, #1
 8000656:	489d      	ldr	r0, [pc, #628]	; (80008cc <main+0x310>)
 8000658:	f003 fe40 	bl	80042dc <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, &inputBuf[inputPos], 1, HAL_MAX_DELAY); //echo
 800065c:	4ba0      	ldr	r3, [pc, #640]	; (80008e0 <main+0x324>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4aa0      	ldr	r2, [pc, #640]	; (80008e4 <main+0x328>)
 8000662:	1899      	adds	r1, r3, r2
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000668:	2201      	movs	r2, #1
 800066a:	4898      	ldr	r0, [pc, #608]	; (80008cc <main+0x310>)
 800066c:	f003 fda2 	bl	80041b4 <HAL_UART_Transmit>
		inputPos++;
 8000670:	4b9b      	ldr	r3, [pc, #620]	; (80008e0 <main+0x324>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a9a      	ldr	r2, [pc, #616]	; (80008e0 <main+0x324>)
 8000678:	6013      	str	r3, [r2, #0]
	}
	while (inputPos != INPUT_SIZE - 1 && inputBuf[inputPos - 1] != '\r');
 800067a:	4b99      	ldr	r3, [pc, #612]	; (80008e0 <main+0x324>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b7f      	cmp	r3, #127	; 0x7f
 8000680:	d006      	beq.n	8000690 <main+0xd4>
 8000682:	4b97      	ldr	r3, [pc, #604]	; (80008e0 <main+0x324>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3b01      	subs	r3, #1
 8000688:	4a96      	ldr	r2, [pc, #600]	; (80008e4 <main+0x328>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	2b0d      	cmp	r3, #13
 800068e:	d1db      	bne.n	8000648 <main+0x8c>

	  inputBuf[inputPos] = '\0';
 8000690:	4b93      	ldr	r3, [pc, #588]	; (80008e0 <main+0x324>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a93      	ldr	r2, [pc, #588]	; (80008e4 <main+0x328>)
 8000696:	2100      	movs	r1, #0
 8000698:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 800069a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069e:	2201      	movs	r2, #1
 80006a0:	4991      	ldr	r1, [pc, #580]	; (80008e8 <main+0x32c>)
 80006a2:	488a      	ldr	r0, [pc, #552]	; (80008cc <main+0x310>)
 80006a4:	f003 fd86 	bl	80041b4 <HAL_UART_Transmit>

	  int isWheel = inputBuf[0] == 'w';
 80006a8:	4b8e      	ldr	r3, [pc, #568]	; (80008e4 <main+0x328>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b77      	cmp	r3, #119	; 0x77
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	  if (isWheel) {
 80006ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d029      	beq.n	8000716 <main+0x15a>
		  int d = strtol(inputBuf + 1, NULL, 10);
 80006c2:	4b8a      	ldr	r3, [pc, #552]	; (80008ec <main+0x330>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 fe8d 	bl	80083e8 <strtol>
 80006ce:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		  if (d > 127)
 80006d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006d6:	2b7f      	cmp	r3, #127	; 0x7f
 80006d8:	dd03      	ble.n	80006e2 <main+0x126>
			  d = 127;
 80006da:	237f      	movs	r3, #127	; 0x7f
 80006dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80006e0:	e008      	b.n	80006f4 <main+0x138>
		  else if (d < -128)
 80006e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006e6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80006ea:	da03      	bge.n	80006f4 <main+0x138>
			  d = -128;
 80006ec:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80006f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		  mouse_report[3] = (int8_t)d;
 80006f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b75      	ldr	r3, [pc, #468]	; (80008d0 <main+0x314>)
 80006fc:	70da      	strb	r2, [r3, #3]
		  USBD_HID_SendReport(&hUsbDeviceFS, mouse_report, MOUSE_REPORT_SIZE);
 80006fe:	2205      	movs	r2, #5
 8000700:	4973      	ldr	r1, [pc, #460]	; (80008d0 <main+0x314>)
 8000702:	4874      	ldr	r0, [pc, #464]	; (80008d4 <main+0x318>)
 8000704:	f005 fe1e 	bl	8006344 <USBD_HID_SendReport>
		  HAL_Delay(50);
 8000708:	2032      	movs	r0, #50	; 0x32
 800070a:	f000 fbad 	bl	8000e68 <HAL_Delay>
		  mouse_report[3] = 0;
 800070e:	4b70      	ldr	r3, [pc, #448]	; (80008d0 <main+0x314>)
 8000710:	2200      	movs	r2, #0
 8000712:	70da      	strb	r2, [r3, #3]
 8000714:	e78e      	b.n	8000634 <main+0x78>
	  }
	  else {
		  char *endptr = NULL;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  int x = strtol(inputBuf, &endptr, 10);
 800071c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000720:	220a      	movs	r2, #10
 8000722:	4619      	mov	r1, r3
 8000724:	486f      	ldr	r0, [pc, #444]	; (80008e4 <main+0x328>)
 8000726:	f007 fe5f 	bl	80083e8 <strtol>
 800072a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		  int y = strtol(endptr, &endptr, 10);
 800072e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000732:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000736:	220a      	movs	r2, #10
 8000738:	4618      	mov	r0, r3
 800073a:	f007 fe55 	bl	80083e8 <strtol>
 800073e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		  int clickWhenMoved = strtol(endptr, NULL, 10);
 8000742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000746:	220a      	movs	r2, #10
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f007 fe4c 	bl	80083e8 <strtol>
 8000750:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		  char msgbuf[128];
		  int msglen = snprintf(msgbuf, sizeof(msgbuf), "Going to %d,%d\r\n", x, y);
 8000754:	1d38      	adds	r0, r7, #4
 8000756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000760:	4a63      	ldr	r2, [pc, #396]	; (80008f0 <main+0x334>)
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	f007 fd88 	bl	8008278 <sniprintf>
 8000768:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgbuf, msglen, HAL_MAX_DELAY);
 800076c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000770:	b29a      	uxth	r2, r3
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000778:	4854      	ldr	r0, [pc, #336]	; (80008cc <main+0x310>)
 800077a:	f003 fd1b 	bl	80041b4 <HAL_UART_Transmit>

		  for (;;) {
			  int d[2];
			  d[0] = x - curx;
 800077e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  d[1] = y - cury;
 800078c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			  if (d[0] == 0 && d[1] == 0) {
 800079a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d123      	bne.n	80007ea <main+0x22e>
 80007a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d11f      	bne.n	80007ea <main+0x22e>

			  curx += d[0];
			  cury += d[1];
		  }

		  mouse_report[1] = 0;
 80007aa:	4b49      	ldr	r3, [pc, #292]	; (80008d0 <main+0x314>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	705a      	strb	r2, [r3, #1]
		  mouse_report[2] = 0;
 80007b0:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <main+0x314>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	709a      	strb	r2, [r3, #2]

		  msglen = snprintf(msgbuf, sizeof(msgbuf), "At %d,%d\r\n", x, y);
 80007b6:	1d38      	adds	r0, r7, #4
 80007b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007c2:	4a4c      	ldr	r2, [pc, #304]	; (80008f4 <main+0x338>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	f007 fd57 	bl	8008278 <sniprintf>
 80007ca:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		  HAL_UART_Transmit(&huart2, (uint8_t *)msgbuf, msglen, HAL_MAX_DELAY);
 80007ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <main+0x310>)
 80007dc:	f003 fcea 	bl	80041b4 <HAL_UART_Transmit>

          if (clickWhenMoved != 0)
 80007e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d16b      	bne.n	80008c0 <main+0x304>
 80007e8:	e724      	b.n	8000634 <main+0x78>
			  for (int i=0; i < 2; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80007f0:	e041      	b.n	8000876 <main+0x2ba>
				  if (d[i] > 0 && d[i] > MOVE_DELTA) {
 80007f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80007fc:	4413      	add	r3, r2
 80007fe:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000802:	2b00      	cmp	r3, #0
 8000804:	dd13      	ble.n	800082e <main+0x272>
 8000806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000810:	4413      	add	r3, r2
 8000812:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000816:	2b0a      	cmp	r3, #10
 8000818:	dd09      	ble.n	800082e <main+0x272>
					  d[i] = MOVE_DELTA;
 800081a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000824:	4413      	add	r3, r2
 8000826:	220a      	movs	r2, #10
 8000828:	f843 2c34 	str.w	r2, [r3, #-52]
 800082c:	e01e      	b.n	800086c <main+0x2b0>
				  else if (d[i] < 0 && d[i] < -MOVE_DELTA) {
 800082e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000838:	4413      	add	r3, r2
 800083a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da14      	bge.n	800086c <main+0x2b0>
 8000842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800084c:	4413      	add	r3, r2
 800084e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000852:	f113 0f0a 	cmn.w	r3, #10
 8000856:	da09      	bge.n	800086c <main+0x2b0>
					  d[i] = -MOVE_DELTA;
 8000858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000862:	4413      	add	r3, r2
 8000864:	f06f 0209 	mvn.w	r2, #9
 8000868:	f843 2c34 	str.w	r2, [r3, #-52]
			  for (int i=0; i < 2; i++) {
 800086c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000870:	3301      	adds	r3, #1
 8000872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800087a:	2b01      	cmp	r3, #1
 800087c:	ddb9      	ble.n	80007f2 <main+0x236>
			  mouse_report[1] = (int8_t)d[0];
 800087e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <main+0x314>)
 8000886:	705a      	strb	r2, [r3, #1]
			  mouse_report[2] = (int8_t)d[1];
 8000888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <main+0x314>)
 8000890:	709a      	strb	r2, [r3, #2]
			  USBD_HID_SendReport(&hUsbDeviceFS, mouse_report, MOUSE_REPORT_SIZE);
 8000892:	2205      	movs	r2, #5
 8000894:	490e      	ldr	r1, [pc, #56]	; (80008d0 <main+0x314>)
 8000896:	480f      	ldr	r0, [pc, #60]	; (80008d4 <main+0x318>)
 8000898:	f005 fd54 	bl	8006344 <USBD_HID_SendReport>
			  HAL_Delay(MOVE_DELAY);
 800089c:	2012      	movs	r0, #18
 800089e:	f000 fae3 	bl	8000e68 <HAL_Delay>
			  curx += d[0];
 80008a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80008a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80008aa:	4413      	add	r3, r2
 80008ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			  cury += d[1];
 80008b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80008b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80008b8:	4413      	add	r3, r2
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		  for (;;) {
 80008be:	e75e      	b.n	800077e <main+0x1c2>
		    click();
 80008c0:	f7ff fe52 	bl	8000568 <click>
  {
 80008c4:	e6b6      	b.n	8000634 <main+0x78>
 80008c6:	bf00      	nop
 80008c8:	08008c3c 	.word	0x08008c3c
 80008cc:	200002a4 	.word	0x200002a4
 80008d0:	200001f4 	.word	0x200001f4
 80008d4:	20000378 	.word	0x20000378
 80008d8:	08008c50 	.word	0x08008c50
 80008dc:	08008c5c 	.word	0x08008c5c
 80008e0:	200001fc 	.word	0x200001fc
 80008e4:	20000224 	.word	0x20000224
 80008e8:	08008c6c 	.word	0x08008c6c
 80008ec:	20000225 	.word	0x20000225
 80008f0:	08008c70 	.word	0x08008c70
 80008f4:	08008c84 	.word	0x08008c84

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b096      	sub	sp, #88	; 0x58
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2244      	movs	r2, #68	; 0x44
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fcae 	bl	8008268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800091e:	f001 fde9 	bl	80024f4 <HAL_PWREx_ControlVoltageScaling>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000928:	f000 f8ac 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800092c:	2310      	movs	r3, #16
 800092e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000940:	2301      	movs	r3, #1
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000948:	2314      	movs	r3, #20
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094c:	2307      	movs	r3, #7
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fe2f 	bl	80025c0 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000968:	f000 f88c 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000978:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800097c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	2102      	movs	r1, #2
 8000988:	4618      	mov	r0, r3
 800098a:	f002 f9ff 	bl	8002d8c <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000994:	f000 f876 	bl	8000a84 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3758      	adds	r7, #88	; 0x58
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <MX_USART2_UART_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x58>)
 80009e4:	f003 fb98 	bl	8004118 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f849 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200002a4 	.word	0x200002a4
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_GPIO_Init+0x5c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a72:	f000 f9d9 	bl	8000e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x44>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x44>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ac      	sub	sp, #176	; 0xb0
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2288      	movs	r2, #136	; 0x88
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fbb5 	bl	8008268 <memset>
  if(huart->Instance==USART2)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <HAL_UART_MspInit+0xb0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d13a      	bne.n	8000b7e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fb71 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff ffb0 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b28:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b7a:	f000 fa7b 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	37b0      	adds	r7, #176	; 0xb0
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004400 	.word	0x40004400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000c00 	.word	0x48000c00

08000b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2019      	movs	r0, #25
 8000baa:	f000 fa39 	bl	8001020 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bae:	2019      	movs	r0, #25
 8000bb0:	f000 fa52 	bl	8001058 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <HAL_InitTick+0xa0>)
 8000bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb8:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <HAL_InitTick+0xa0>)
 8000bba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bbe:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_InitTick+0xa0>)
 8000bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	f107 0210 	add.w	r2, r7, #16
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fa7e 	bl	80030d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bdc:	f002 fa66 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 8000be0:	4603      	mov	r3, r0
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_InitTick+0xa4>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	0c9b      	lsrs	r3, r3, #18
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_InitTick+0xa8>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <HAL_InitTick+0xac>)
 8000bf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_InitTick+0xa8>)
 8000bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_InitTick+0xa8>)
 8000c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_InitTick+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_InitTick+0xa8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <HAL_InitTick+0xa8>)
 8000c16:	f002 ffad 	bl	8003b74 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d104      	bne.n	8000c2a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c20:	4806      	ldr	r0, [pc, #24]	; (8000c3c <HAL_InitTick+0xa8>)
 8000c22:	f003 f809 	bl	8003c38 <HAL_TIM_Base_Start_IT>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3730      	adds	r7, #48	; 0x30
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	431bde83 	.word	0x431bde83
 8000c3c:	20000328 	.word	0x20000328
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ca2:	f003 f839 	bl	8003d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000328 	.word	0x20000328

08000cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <OTG_FS_IRQHandler+0x10>)
 8000cb6:	f000 fcda 	bl	800166e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000848 	.word	0x20000848

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f007 fa8e 	bl	8008214 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20018000 	.word	0x20018000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	20000200 	.word	0x20000200
 8000d2c:	20000c60 	.word	0x20000c60

08000d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <SystemInit+0x5c>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <SystemInit+0x5c>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <SystemInit+0x60>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <SystemInit+0x60>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <SystemInit+0x60>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <SystemInit+0x60>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <SystemInit+0x60>)
 8000d5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <SystemInit+0x60>)
 8000d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <SystemInit+0x60>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <SystemInit+0x60>)
 8000d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <SystemInit+0x60>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	40021000 	.word	0x40021000

08000d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d98:	f7ff ffca 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d9e:	e003      	b.n	8000da8 <LoopCopyDataInit>

08000da0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000da2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000da4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000da6:	3104      	adds	r1, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000db0:	d3f6      	bcc.n	8000da0 <CopyDataInit>
	ldr	r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000db4:	e002      	b.n	8000dbc <LoopFillZerobss>

08000db6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000db6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000db8:	f842 3b04 	str.w	r3, [r2], #4

08000dbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <LoopForever+0x16>)
	cmp	r2, r3
 8000dbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dc0:	d3f9      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f007 fa2d 	bl	8008220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc6:	f7ff fbf9 	bl	80005bc <main>

08000dca <LoopForever>:

LoopForever:
    b LoopForever
 8000dca:	e7fe      	b.n	8000dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dcc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000dd0:	08008e64 	.word	0x08008e64
	ldr	r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dd8:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8000ddc:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8000de0:	20000c60 	.word	0x20000c60

08000de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_Init+0x3c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_Init+0x3c>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f903 	bl	800100a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e04:	200f      	movs	r0, #15
 8000e06:	f7ff fec5 	bl	8000b94 <HAL_InitTick>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	e001      	b.n	8000e1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e16:	f7ff fe3b 	bl	8000a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000374 	.word	0x20000374

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000374 	.word	0x20000374

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff4c 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001032:	f7ff ff61 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001036:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	6978      	ldr	r0, [r7, #20]
 800103e:	f7ff ffb1 	bl	8000fa4 <NVIC_EncodePriority>
 8001042:	4602      	mov	r2, r0
 8001044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff80 	bl	8000f50 <__NVIC_SetPriority>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff54 	bl	8000f14 <__NVIC_EnableIRQ>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e17f      	b.n	8001384 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8171 	beq.w	800137e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00b      	beq.n	80010bc <HAL_GPIO_Init+0x48>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	2b11      	cmp	r3, #17
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b03      	cmp	r3, #3
 8001128:	d118      	bne.n	800115c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	08db      	lsrs	r3, r3, #3
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x128>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b12      	cmp	r3, #18
 800119a:	d123      	bne.n	80011e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	6939      	ldr	r1, [r7, #16]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0203 	and.w	r2, r3, #3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80ac 	beq.w	800137e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b5f      	ldr	r3, [pc, #380]	; (80013a4 <HAL_GPIO_Init+0x330>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	4a5e      	ldr	r2, [pc, #376]	; (80013a4 <HAL_GPIO_Init+0x330>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6613      	str	r3, [r2, #96]	; 0x60
 8001232:	4b5c      	ldr	r3, [pc, #368]	; (80013a4 <HAL_GPIO_Init+0x330>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800123e:	4a5a      	ldr	r2, [pc, #360]	; (80013a8 <HAL_GPIO_Init+0x334>)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001268:	d025      	beq.n	80012b6 <HAL_GPIO_Init+0x242>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <HAL_GPIO_Init+0x338>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01f      	beq.n	80012b2 <HAL_GPIO_Init+0x23e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4e      	ldr	r2, [pc, #312]	; (80013b0 <HAL_GPIO_Init+0x33c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d019      	beq.n	80012ae <HAL_GPIO_Init+0x23a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4d      	ldr	r2, [pc, #308]	; (80013b4 <HAL_GPIO_Init+0x340>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0x236>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_GPIO_Init+0x344>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d00d      	beq.n	80012a6 <HAL_GPIO_Init+0x232>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <HAL_GPIO_Init+0x348>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_GPIO_Init+0x22e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <HAL_GPIO_Init+0x34c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_GPIO_Init+0x22a>
 800129a:	2306      	movs	r3, #6
 800129c:	e00c      	b.n	80012b8 <HAL_GPIO_Init+0x244>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00a      	b.n	80012b8 <HAL_GPIO_Init+0x244>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x244>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x244>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x244>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x244>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x244>
 80012b6:	2300      	movs	r3, #0
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c8:	4937      	ldr	r1, [pc, #220]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_GPIO_Init+0x350>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fa:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <HAL_GPIO_Init+0x350>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_GPIO_Init+0x350>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_GPIO_Init+0x350>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <HAL_GPIO_Init+0x350>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_GPIO_Init+0x350>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_GPIO_Init+0x350>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <HAL_GPIO_Init+0x350>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	f47f ae78 	bne.w	8001084 <HAL_GPIO_Init+0x10>
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000
 80013ac:	48000400 	.word	0x48000400
 80013b0:	48000800 	.word	0x48000800
 80013b4:	48000c00 	.word	0x48000c00
 80013b8:	48001000 	.word	0x48001000
 80013bc:	48001400 	.word	0x48001400
 80013c0:	48001800 	.word	0x48001800
 80013c4:	40010400 	.word	0x40010400

080013c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b08f      	sub	sp, #60	; 0x3c
 80013cc:	af0a      	add	r7, sp, #40	; 0x28
 80013ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e116      	b.n	8001608 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d106      	bne.n	80013fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f006 fadd 	bl	80079b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fcfc 	bl	8004e16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	687e      	ldr	r6, [r7, #4]
 8001426:	466d      	mov	r5, sp
 8001428:	f106 0410 	add.w	r4, r6, #16
 800142c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001434:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001438:	e885 0003 	stmia.w	r5, {r0, r1}
 800143c:	1d33      	adds	r3, r6, #4
 800143e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f003 fc0e 	bl	8004c62 <USB_CoreInit>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0d7      	b.n	8001608 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f003 fcea 	bl	8004e38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e04a      	b.n	8001500 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	333d      	adds	r3, #61	; 0x3d
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	333c      	adds	r3, #60	; 0x3c
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	b298      	uxth	r0, r3
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	1a9b      	subs	r3, r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	3342      	adds	r3, #66	; 0x42
 80014a6:	4602      	mov	r2, r0
 80014a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	333f      	adds	r3, #63	; 0x3f
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3344      	adds	r3, #68	; 0x44
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	3348      	adds	r3, #72	; 0x48
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3350      	adds	r3, #80	; 0x50
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	3301      	adds	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3af      	bcc.n	800146a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e044      	b.n	800159a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	1a9b      	subs	r3, r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	3301      	adds	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3b5      	bcc.n	8001510 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	687e      	ldr	r6, [r7, #4]
 80015ac:	466d      	mov	r5, sp
 80015ae:	f106 0410 	add.w	r4, r6, #16
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015be:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c2:	1d33      	adds	r3, r6, #4
 80015c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f003 fc60 	bl	8004e8c <USB_DevInit>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e014      	b.n	8001608 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 ff4a 	bl	8002490 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fbe2 	bl	8005dca <USB_DevDisconnect>

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001610 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_PCD_Start+0x1c>
 8001628:	2302      	movs	r3, #2
 800162a:	e01c      	b.n	8001666 <HAL_PCD_Start+0x56>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fbd1 	bl	8004df4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fb96 	bl	8005d88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800166e:	b590      	push	{r4, r7, lr}
 8001670:	b08d      	sub	sp, #52	; 0x34
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f004 fc54 	bl	8005f32 <USB_GetMode>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 838f 	bne.w	8001db0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fbb8 	bl	8005e0c <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8385 	beq.w	8001dae <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fbaf 	bl	8005e0c <USB_ReadInterrupts>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d107      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f002 0202 	and.w	r2, r2, #2
 80016c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 fb9d 	bl	8005e0c <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b10      	cmp	r3, #16
 80016da:	d161      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	699a      	ldr	r2, [r3, #24]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0210 	bic.w	r2, r2, #16
 80016ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f003 020f 	and.w	r2, r3, #15
 80016f8:	4613      	mov	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	3304      	adds	r3, #4
 800170a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	0c5b      	lsrs	r3, r3, #17
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	2b02      	cmp	r3, #2
 8001716:	d124      	bne.n	8001762 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d035      	beq.n	8001790 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800172e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001732:	b29b      	uxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	6a38      	ldr	r0, [r7, #32]
 8001738:	f004 fa03 	bl	8005b42 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001748:	441a      	add	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800175a:	441a      	add	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	619a      	str	r2, [r3, #24]
 8001760:	e016      	b.n	8001790 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	0c5b      	lsrs	r3, r3, #17
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	2b06      	cmp	r3, #6
 800176c:	d110      	bne.n	8001790 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001774:	2208      	movs	r2, #8
 8001776:	4619      	mov	r1, r3
 8001778:	6a38      	ldr	r0, [r7, #32]
 800177a:	f004 f9e2 	bl	8005b42 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178a:	441a      	add	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0210 	orr.w	r2, r2, #16
 800179e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fb31 	bl	8005e0c <USB_ReadInterrupts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017b4:	d16e      	bne.n	8001894 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fb37 	bl	8005e32 <USB_ReadDevAllOutEpInterrupt>
 80017c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017c6:	e062      	b.n	800188e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d057      	beq.n	8001882 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fb5c 	bl	8005e9a <USB_ReadDevOutEPInterrupt>
 80017e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00c      	beq.n	8001808 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	015a      	lsls	r2, r3, #5
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017fa:	461a      	mov	r2, r3
 80017fc:	2301      	movs	r3, #1
 80017fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fd6a 	bl	80022dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800181e:	461a      	mov	r2, r3
 8001820:	2308      	movs	r3, #8
 8001822:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fda6 	bl	8002378 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001842:	461a      	mov	r2, r3
 8001844:	2310      	movs	r3, #16
 8001846:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185e:	461a      	mov	r2, r3
 8001860:	2320      	movs	r3, #32
 8001862:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	4413      	add	r3, r2
 8001876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800187a:	461a      	mov	r2, r3
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	3301      	adds	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d199      	bne.n	80017c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f004 fab7 	bl	8005e0c <USB_ReadInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018a8:	f040 8087 	bne.w	80019ba <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 fad8 	bl	8005e66 <USB_ReadDevAllInEpInterrupt>
 80018b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018bc:	e07a      	b.n	80019b4 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d06f      	beq.n	80019a8 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 faff 	bl	8005ed6 <USB_ReadDevInEPInterrupt>
 80018d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	2201      	movs	r2, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69f9      	ldr	r1, [r7, #28]
 8001900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001904:	4013      	ands	r3, r2
 8001906:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001914:	461a      	mov	r2, r3
 8001916:	2301      	movs	r3, #1
 8001918:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4619      	mov	r1, r3
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f006 f906 	bl	8007b32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	4413      	add	r3, r2
 8001938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193c:	461a      	mov	r2, r3
 800193e:	2308      	movs	r3, #8
 8001940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001958:	461a      	mov	r2, r3
 800195a:	2310      	movs	r3, #16
 800195c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	461a      	mov	r2, r3
 8001976:	2340      	movs	r3, #64	; 0x40
 8001978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	461a      	mov	r2, r3
 8001992:	2302      	movs	r3, #2
 8001994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fc11 	bl	80021ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3301      	adds	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d181      	bne.n	80018be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 fa24 	bl	8005e0c <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019ce:	d122      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019f6:	2100      	movs	r1, #0
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f006 fb9f 	bl	800813c <HAL_PCDEx_LPM_Callback>
 80019fe:	e002      	b.n	8001a06 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f006 f903 	bl	8007c0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f9f6 	bl	8005e0c <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a2a:	d112      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d102      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f006 f8bf 	bl	8007bc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 f9d8 	bl	8005e0c <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a66:	d121      	bne.n	8001aac <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a76:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d111      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	f003 020f 	and.w	r2, r3, #15
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f006 fb4c 	bl	800813c <HAL_PCDEx_LPM_Callback>
 8001aa4:	e002      	b.n	8001aac <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f006 f88a 	bl	8007bc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 f9ab 	bl	8005e0c <USB_ReadInterrupts>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac0:	f040 80c5 	bne.w	8001c4e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2110      	movs	r1, #16
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f003 fb20 	bl	8005124 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae8:	e056      	b.n	8001b98 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001af6:	461a      	mov	r2, r3
 8001af8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001afc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0e:	0151      	lsls	r1, r2, #5
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	440a      	add	r2, r1
 8001b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b1c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b62:	0151      	lsls	r1, r2, #5
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	440a      	add	r2, r1
 8001b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	015a      	lsls	r2, r3, #5
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b82:	0151      	lsls	r1, r2, #5
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	440a      	add	r2, r1
 8001b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	3301      	adds	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3a3      	bcc.n	8001aea <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bce:	f043 030b 	orr.w	r3, r3, #11
 8001bd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be4:	f043 030b 	orr.w	r3, r3, #11
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	e015      	b.n	8001c18 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bfe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c02:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c12:	f043 030b 	orr.w	r3, r3, #11
 8001c16:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c2a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f004 f9ab 	bl	8005f94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 f8da 	bl	8005e0c <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c62:	d124      	bne.n	8001cae <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f970 	bl	8005f4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fab7 	bl	80051e6 <USB_GetDevSpeed>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681c      	ldr	r4, [r3, #0]
 8001c84:	f001 f9f0 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8001c88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	4620      	mov	r0, r4
 8001c94:	f003 f812 	bl	8004cbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f005 ff72 	bl	8007b82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 f8aa 	bl	8005e0c <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f005 ff4f 	bl	8007b66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f002 0208 	and.w	r2, r2, #8
 8001cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 f895 	bl	8005e0c <USB_ReadInterrupts>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cec:	d10f      	bne.n	8001d0e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f005 ffc1 	bl	8007c80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 f87a 	bl	8005e0c <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d22:	d10f      	bne.n	8001d44 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f005 ff94 	bl	8007c5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f004 f85f 	bl	8005e0c <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d10a      	bne.n	8001d70 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f005 ffa2 	bl	8007ca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 f849 	bl	8005e0c <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d115      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f005 ff92 	bl	8007cc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6859      	ldr	r1, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	e000      	b.n	8001db0 <HAL_PCD_IRQHandler+0x742>
      return;
 8001dae:	bf00      	nop
    }
  }
}
 8001db0:	3734      	adds	r7, #52	; 0x34
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}

08001db6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_PCD_SetAddress+0x1a>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e013      	b.n	8001df8 <HAL_PCD_SetAddress+0x42>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 ffa7 	bl	8005d3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	70fb      	strb	r3, [r7, #3]
 8001e12:	460b      	mov	r3, r1
 8001e14:	803b      	strh	r3, [r7, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da0f      	bge.n	8001e46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3338      	adds	r3, #56	; 0x38
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	705a      	strb	r2, [r3, #1]
 8001e44:	e00f      	b.n	8001e66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	f003 020f 	and.w	r2, r3, #15
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e72:	883a      	ldrh	r2, [r7, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	78ba      	ldrb	r2, [r7, #2]
 8001e7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	785b      	ldrb	r3, [r3, #1]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e90:	78bb      	ldrb	r3, [r7, #2]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d102      	bne.n	8001e9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_PCD_EP_Open+0xaa>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e00e      	b.n	8001ec8 <HAL_PCD_EP_Open+0xc8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f9b3 	bl	8005224 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da0f      	bge.n	8001f04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f003 020f 	and.w	r2, r3, #15
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3338      	adds	r3, #56	; 0x38
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	705a      	strb	r2, [r3, #1]
 8001f02:	e00f      	b.n	8001f24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_PCD_EP_Close+0x6e>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e00e      	b.n	8001f5c <HAL_PCD_EP_Close+0x8c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68f9      	ldr	r1, [r7, #12]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f9f1 	bl	8005334 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	460b      	mov	r3, r1
 8001f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	f003 020f 	and.w	r2, r3, #15
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4413      	add	r3, r2
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 fc6e 	bl	80058a4 <USB_EP0StartXfer>
 8001fc8:	e005      	b.n	8001fd6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fa8b 	bl	80054ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3338      	adds	r3, #56	; 0x38
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2201      	movs	r2, #1
 800201e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	b2da      	uxtb	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6979      	ldr	r1, [r7, #20]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 fc31 	bl	80058a4 <USB_EP0StartXfer>
 8002042:	e005      	b.n	8002050 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6979      	ldr	r1, [r7, #20]
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fa4e 	bl	80054ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	d901      	bls.n	8002078 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e04e      	b.n	8002116 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207c:	2b00      	cmp	r3, #0
 800207e:	da0f      	bge.n	80020a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 020f 	and.w	r2, r3, #15
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3338      	adds	r3, #56	; 0x38
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	705a      	strb	r2, [r3, #1]
 800209e:	e00d      	b.n	80020bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_PCD_EP_SetStall+0x82>
 80020d8:	2302      	movs	r3, #2
 80020da:	e01c      	b.n	8002116 <HAL_PCD_EP_SetStall+0xbc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68f9      	ldr	r1, [r7, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fd52 	bl	8005b94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d108      	bne.n	800210c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f003 ff44 	bl	8005f94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d901      	bls.n	800213c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e042      	b.n	80021c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800213c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002140:	2b00      	cmp	r3, #0
 8002142:	da0f      	bge.n	8002164 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 020f 	and.w	r2, r3, #15
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	3338      	adds	r3, #56	; 0x38
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	705a      	strb	r2, [r3, #1]
 8002162:	e00f      	b.n	8002184 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	f003 020f 	and.w	r2, r3, #15
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	b2da      	uxtb	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_PCD_EP_ClrStall+0x86>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e00e      	b.n	80021c2 <HAL_PCD_EP_ClrStall+0xa4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68f9      	ldr	r1, [r7, #12]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fd5c 	bl	8005c70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b088      	sub	sp, #32
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	3338      	adds	r3, #56	; 0x38
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d901      	bls.n	8002202 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e067      	b.n	80022d2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	429a      	cmp	r2, r3
 8002216:	d902      	bls.n	800221e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3303      	adds	r3, #3
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002226:	e026      	b.n	8002276 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	429a      	cmp	r2, r3
 800223c:	d902      	bls.n	8002244 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3303      	adds	r3, #3
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68d9      	ldr	r1, [r3, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	b29b      	uxth	r3, r3
 8002258:	6978      	ldr	r0, [r7, #20]
 800225a:	f003 fc41 	bl	8005ae0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	441a      	add	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	b29b      	uxth	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	429a      	cmp	r2, r3
 800228a:	d809      	bhi.n	80022a0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002294:	429a      	cmp	r2, r3
 8002296:	d203      	bcs.n	80022a0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1c3      	bne.n	8002228 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d811      	bhi.n	80022d0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	2201      	movs	r2, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	6939      	ldr	r1, [r7, #16]
 80022c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022cc:	4013      	ands	r3, r2
 80022ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	333c      	adds	r3, #60	; 0x3c
 80022f4:	3304      	adds	r3, #4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <PCD_EP_OutXfrComplete_int+0x98>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d124      	bne.n	800235c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	e01a      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002348:	461a      	mov	r2, r3
 800234a:	2320      	movs	r3, #32
 800234c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f005 fbd1 	bl	8007afc <HAL_PCD_DataOutStageCallback>
 800235a:	e005      	b.n	8002368 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f005 fbca 	bl	8007afc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	4f54310a 	.word	0x4f54310a

08002378 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	333c      	adds	r3, #60	; 0x3c
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <PCD_EP_OutSetupPacket_int+0x64>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d90e      	bls.n	80023cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f005 fb83 	bl	8007ad8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fe:	883b      	ldrh	r3, [r7, #0]
 8002400:	0419      	lsls	r1, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
 800240c:	e028      	b.n	8002460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e00d      	b.n	800243e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	3340      	adds	r3, #64	; 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	3b01      	subs	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ec      	bcc.n	8002422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	0418      	lsls	r0, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4302      	orrs	r2, r0
 8002458:	3340      	adds	r3, #64	; 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c2:	f043 0303 	orr.w	r3, r3, #3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40007000 	.word	0x40007000

080024f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002502:	d130      	bne.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800250c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002510:	d038      	beq.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800251a:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2232      	movs	r2, #50	; 0x32
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	4a1b      	ldr	r2, [pc, #108]	; (800259c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9b      	lsrs	r3, r3, #18
 8002534:	3301      	adds	r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002538:	e002      	b.n	8002540 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3b01      	subs	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254c:	d102      	bne.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x60>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f2      	bne.n	800253a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d110      	bne.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e00f      	b.n	8002586 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002572:	d007      	beq.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800257c:	4a05      	ldr	r2, [pc, #20]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002582:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40007000 	.word	0x40007000
 8002598:	20000000 	.word	0x20000000
 800259c:	431bde83 	.word	0x431bde83

080025a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6053      	str	r3, [r2, #4]
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40007000 	.word	0x40007000

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e3d4      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025d2:	4ba1      	ldr	r3, [pc, #644]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025dc:	4b9e      	ldr	r3, [pc, #632]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80e4 	beq.w	80027bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_RCC_OscConfig+0x4a>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	f040 808b 	bne.w	8002718 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b01      	cmp	r3, #1
 8002606:	f040 8087 	bne.w	8002718 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800260a:	4b93      	ldr	r3, [pc, #588]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e3ac      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	4b8c      	ldr	r3, [pc, #560]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_RCC_OscConfig+0x7c>
 8002632:	4b89      	ldr	r3, [pc, #548]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263a:	e005      	b.n	8002648 <HAL_RCC_OscConfig+0x88>
 800263c:	4b86      	ldr	r3, [pc, #536]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002648:	4293      	cmp	r3, r2
 800264a:	d223      	bcs.n	8002694 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fd73 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e38d      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002660:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4977      	ldr	r1, [pc, #476]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267e:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	021b      	lsls	r3, r3, #8
 800268c:	4972      	ldr	r1, [pc, #456]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
 8002692:	e025      	b.n	80026e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002694:	4b70      	ldr	r3, [pc, #448]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6f      	ldr	r2, [pc, #444]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	496a      	ldr	r1, [pc, #424]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b2:	4b69      	ldr	r3, [pc, #420]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	4965      	ldr	r1, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fd33 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e34d      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e0:	f000 fc36 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	495a      	ldr	r1, [pc, #360]	; (800285c <HAL_RCC_OscConfig+0x29c>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_RCC_OscConfig+0x2a0>)
 80026fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_OscConfig+0x2a4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fa45 	bl	8000b94 <HAL_InitTick>
 800270a:	4603      	mov	r3, r0
 800270c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d052      	beq.n	80027ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	e331      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d032      	beq.n	8002786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002720:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800272c:	f7fe fb90 	bl	8000e50 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002734:	f7fe fb8c 	bl	8000e50 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e31a      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002746:	4b44      	ldr	r3, [pc, #272]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a40      	ldr	r2, [pc, #256]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	493b      	ldr	r1, [pc, #236]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002770:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	4936      	ldr	r1, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e01a      	b.n	80027bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002786:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a33      	ldr	r2, [pc, #204]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002792:	f7fe fb5d 	bl	8000e50 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800279a:	f7fe fb59 	bl	8000e50 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e2e7      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x1da>
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d074      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x21a>
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d10e      	bne.n	80027f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d064      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d160      	bne.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e2c4      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x24a>
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e01d      	b.n	8002846 <HAL_RCC_OscConfig+0x286>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x26e>
 8002814:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800281a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e00b      	b.n	8002846 <HAL_RCC_OscConfig+0x286>
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x298>)
 8002840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01c      	beq.n	8002888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe faff 	bl	8000e50 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002854:	e011      	b.n	800287a <HAL_RCC_OscConfig+0x2ba>
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	08008cd8 	.word	0x08008cd8
 8002860:	20000000 	.word	0x20000000
 8002864:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe faf2 	bl	8000e50 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e280      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800287a:	4baf      	ldr	r3, [pc, #700]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x2a8>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fae2 	bl	8000e50 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fade 	bl	8000e50 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e26c      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028a2:	4ba5      	ldr	r3, [pc, #660]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x2d0>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d060      	beq.n	8002980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x310>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d119      	bne.n	80028fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d116      	bne.n	80028fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	4b99      	ldr	r3, [pc, #612]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x328>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e249      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e8:	4b93      	ldr	r3, [pc, #588]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4990      	ldr	r1, [pc, #576]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fc:	e040      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d023      	beq.n	800294e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002906:	4b8c      	ldr	r3, [pc, #560]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a8b      	ldr	r2, [pc, #556]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe fa9d 	bl	8000e50 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291a:	f7fe fa99 	bl	8000e50 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e227      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292c:	4b82      	ldr	r3, [pc, #520]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b7f      	ldr	r3, [pc, #508]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	497c      	ldr	r1, [pc, #496]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
 800294c:	e018      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b7a      	ldr	r3, [pc, #488]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a79      	ldr	r2, [pc, #484]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe fa79 	bl	8000e50 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe fa75 	bl	8000e50 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e203      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002974:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01c      	beq.n	80029ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299a:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fa54 	bl	8000e50 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ac:	f7fe fa50 	bl	8000e50 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1de      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ef      	beq.n	80029ac <HAL_RCC_OscConfig+0x3ec>
 80029cc:	e01b      	b.n	8002a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b5a      	ldr	r3, [pc, #360]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7fe fa37 	bl	8000e50 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe fa33 	bl	8000e50 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1c1      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f8:	4b4f      	ldr	r3, [pc, #316]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80a6 	beq.w	8002b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a14:	2300      	movs	r3, #0
 8002a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a18:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10d      	bne.n	8002a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a24:	4b44      	ldr	r3, [pc, #272]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a40:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <HAL_RCC_OscConfig+0x57c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d118      	bne.n	8002a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_RCC_OscConfig+0x57c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3a      	ldr	r2, [pc, #232]	; (8002b3c <HAL_RCC_OscConfig+0x57c>)
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a58:	f7fe f9fa 	bl	8000e50 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a60:	f7fe f9f6 	bl	8000e50 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e184      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a72:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <HAL_RCC_OscConfig+0x57c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x4d8>
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	4a2a      	ldr	r2, [pc, #168]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a96:	e024      	b.n	8002ae2 <HAL_RCC_OscConfig+0x522>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b05      	cmp	r3, #5
 8002a9e:	d110      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x502>
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab0:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	4a20      	ldr	r2, [pc, #128]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ac0:	e00f      	b.n	8002ae2 <HAL_RCC_OscConfig+0x522>
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d016      	beq.n	8002b18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe f9b1 	bl	8000e50 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe f9ad 	bl	8000e50 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e139      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ed      	beq.n	8002af2 <HAL_RCC_OscConfig+0x532>
 8002b16:	e01a      	b.n	8002b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe f99a 	bl	8000e50 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe f996 	bl	8000e50 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d906      	bls.n	8002b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e122      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b40:	4b90      	ldr	r3, [pc, #576]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e8      	bne.n	8002b20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d105      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b54:	4b8b      	ldr	r3, [pc, #556]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	4a8a      	ldr	r2, [pc, #552]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8108 	beq.w	8002d7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	f040 80d0 	bne.w	8002d14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b74:	4b83      	ldr	r3, [pc, #524]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0203 	and.w	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d130      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	3b01      	subs	r3, #1
 8002b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d127      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d11f      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bb4:	2a07      	cmp	r2, #7
 8002bb6:	bf14      	ite	ne
 8002bb8:	2201      	movne	r2, #1
 8002bba:	2200      	moveq	r2, #0
 8002bbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d113      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d06e      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d069      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b7      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a5c      	ldr	r2, [pc, #368]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c18:	f7fe f91a 	bl	8000e50 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe f916 	bl	8000e50 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0a4      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3e:	4b51      	ldr	r3, [pc, #324]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b51      	ldr	r3, [pc, #324]	; (8002d88 <HAL_RCC_OscConfig+0x7c8>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c58:	0212      	lsls	r2, r2, #8
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c60:	0852      	lsrs	r2, r2, #1
 8002c62:	3a01      	subs	r2, #1
 8002c64:	0552      	lsls	r2, r2, #21
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c6c:	0852      	lsrs	r2, r2, #1
 8002c6e:	3a01      	subs	r2, #1
 8002c70:	0652      	lsls	r2, r2, #25
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c78:	0912      	lsrs	r2, r2, #4
 8002c7a:	0452      	lsls	r2, r2, #17
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	4941      	ldr	r1, [pc, #260]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c84:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a3e      	ldr	r2, [pc, #248]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c90:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c9c:	f7fe f8d8 	bl	8000e50 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe f8d4 	bl	8000e50 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e062      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc2:	e05a      	b.n	8002d7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e059      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d152      	bne.n	8002d7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ce0:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cec:	f7fe f8b0 	bl	8000e50 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe f8ac 	bl	8000e50 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e03a      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d06:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x734>
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d02d      	beq.n	8002d76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d38:	f023 0303 	bic.w	r3, r3, #3
 8002d3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe f87f 	bl	8000e50 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d56:	f7fe f87b 	bl	8000e50 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e009      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_OscConfig+0x7c4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x796>
 8002d74:	e001      	b.n	8002d7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	f99d808c 	.word	0xf99d808c

08002d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0c8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da0:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d910      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0207 	bic.w	r2, r3, #7
 8002db6:	4961      	ldr	r1, [pc, #388]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0b0      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d04c      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de4:	4b56      	ldr	r3, [pc, #344]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d121      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e09e      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d115      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e092      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e14:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e086      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e07e      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 0203 	bic.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	493f      	ldr	r1, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e46:	f7fe f803 	bl	8000e50 <HAL_GetTick>
 8002e4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4e:	f7fd ffff 	bl	8000e50 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e066      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 020c 	and.w	r2, r3, #12
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d1eb      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	492c      	ldr	r1, [pc, #176]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d210      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0207 	bic.w	r2, r3, #7
 8002eaa:	4924      	ldr	r1, [pc, #144]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_ClockConfig+0x1b0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e036      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4918      	ldr	r1, [pc, #96]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4910      	ldr	r1, [pc, #64]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f02:	f000 f825 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_ClockConfig+0x1b4>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490c      	ldr	r1, [pc, #48]	; (8002f44 <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x1c0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fe34 	bl	8000b94 <HAL_InitTick>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f30:	7afb      	ldrb	r3, [r7, #11]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08008cd8 	.word	0x08008cd8
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5e:	4b3e      	ldr	r3, [pc, #248]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d121      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d11e      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f84:	4b34      	ldr	r3, [pc, #208]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e005      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fac:	4a2b      	ldr	r2, [pc, #172]	; (800305c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10d      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e004      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fd4:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d134      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b03      	cmp	r3, #3
 8002ff2:	d003      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0xac>
 8002ff4:	e005      	b.n	8003002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ff8:	617b      	str	r3, [r7, #20]
      break;
 8002ffa:	e005      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ffe:	617b      	str	r3, [r7, #20]
      break;
 8003000:	e002      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	617b      	str	r3, [r7, #20]
      break;
 8003006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	3301      	adds	r3, #1
 8003014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	fb02 f203 	mul.w	r2, r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	fbb2 f3f3 	udiv	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	0e5b      	lsrs	r3, r3, #25
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	3301      	adds	r3, #1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003048:	69bb      	ldr	r3, [r7, #24]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	08008cf0 	.word	0x08008cf0
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000000 	.word	0x20000000

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003084:	f7ff fff0 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4904      	ldr	r1, [pc, #16]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08008ce8 	.word	0x08008ce8

080030ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030b0:	f7ff ffda 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0adb      	lsrs	r3, r3, #11
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4904      	ldr	r1, [pc, #16]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08008ce8 	.word	0x08008ce8

080030d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	220f      	movs	r2, #15
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0203 	and.w	r2, r3, #3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	08db      	lsrs	r3, r3, #3
 8003112:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_RCC_GetClockConfig+0x60>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	601a      	str	r2, [r3, #0]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000
 8003138:	40022000 	.word	0x40022000

0800313c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f9c0 	bl	80024d8 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
 800315a:	e014      	b.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003166:	6593      	str	r3, [r2, #88]	; 0x58
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f9b0 	bl	80024d8 <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318c:	d10b      	bne.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d919      	bls.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2ba0      	cmp	r3, #160	; 0xa0
 8003198:	d902      	bls.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319a:	2302      	movs	r3, #2
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e013      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a0:	2301      	movs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e010      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d902      	bls.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031ac:	2303      	movs	r3, #3
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e00a      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d102      	bne.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b8:	2302      	movs	r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e004      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d101      	bne.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 0207 	bic.w	r2, r3, #7
 80031d0:	4909      	ldr	r1, [pc, #36]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40022000 	.word	0x40022000

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003204:	2300      	movs	r3, #0
 8003206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003208:	2300      	movs	r3, #0
 800320a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d041      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003220:	d02a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003226:	d824      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322c:	d008      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003232:	d81e      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d010      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323e:	e018      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003240:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a85      	ldr	r2, [pc, #532]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324c:	e015      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fabb 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325e:	e00c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3320      	adds	r3, #32
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fba6 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	74fb      	strb	r3, [r7, #19]
      break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003280:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328e:	4973      	ldr	r1, [pc, #460]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003296:	e001      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d041      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b0:	d02a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b6:	d824      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c2:	d81e      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d010      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ce:	e018      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d0:	4b62      	ldr	r3, [pc, #392]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032dc:	e015      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fa73 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3320      	adds	r3, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb5e 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	74fb      	strb	r3, [r7, #19]
      break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003310:	4b52      	ldr	r3, [pc, #328]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331e:	494f      	ldr	r1, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337c:	f7fd fd68 	bl	8000e50 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003382:	e009      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fd fd64 	bl	8000e50 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	74fb      	strb	r3, [r7, #19]
        break;
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d15c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d019      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fd fd23 	bl	8000e50 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	e00b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fd fd1f 	bl	8000e50 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d902      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	74fb      	strb	r3, [r7, #19]
            break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ec      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7c7b      	ldrb	r3, [r7, #17]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a9d      	ldr	r2, [pc, #628]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003486:	4b98      	ldr	r3, [pc, #608]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	4994      	ldr	r1, [pc, #592]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a8:	4b8f      	ldr	r3, [pc, #572]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	498c      	ldr	r1, [pc, #560]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ca:	4b87      	ldr	r3, [pc, #540]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	4983      	ldr	r1, [pc, #524]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ec:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	497b      	ldr	r1, [pc, #492]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351c:	4972      	ldr	r1, [pc, #456]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003530:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	496a      	ldr	r1, [pc, #424]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	4961      	ldr	r1, [pc, #388]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003574:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003582:	4959      	ldr	r1, [pc, #356]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	4950      	ldr	r1, [pc, #320]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	4948      	ldr	r1, [pc, #288]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	493f      	ldr	r1, [pc, #252]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d028      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	4937      	ldr	r1, [pc, #220]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003626:	60d3      	str	r3, [r2, #12]
 8003628:	e011      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003632:	d10c      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f8c8 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d028      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	491f      	ldr	r1, [pc, #124]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003678:	d106      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003684:	60d3      	str	r3, [r2, #12]
 8003686:	e011      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003690:	d10c      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f899 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d6:	d109      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e014      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f867 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372a:	4928      	ldr	r1, [pc, #160]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f844 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	74bb      	strb	r3, [r7, #18]
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3320      	adds	r3, #32
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f925 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ba:	4904      	ldr	r1, [pc, #16]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000

080037d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037de:	4b75      	ldr	r3, [pc, #468]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ea:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10d      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
       ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003802:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
       ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d047      	beq.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e044      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d018      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x86>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d825      	bhi.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x62>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d009      	beq.n	8003844 <RCCEx_PLLSAI1_Config+0x74>
 8003830:	e020      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003832:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003842:	e01a      	b.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003844:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e013      	b.n	800387e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003856:	4b57      	ldr	r3, [pc, #348]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003862:	4b54      	ldr	r3, [pc, #336]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003872:	e006      	b.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e004      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003882:	bf00      	nop
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	430b      	orrs	r3, r1
 80038a0:	4944      	ldr	r1, [pc, #272]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d17d      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038ac:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fd faca 	bl	8000e50 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038be:	e009      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c0:	f7fd fac6 	bl	8000e50 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d902      	bls.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	73fb      	strb	r3, [r7, #15]
        break;
 80038d2:	e005      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ef      	bne.n	80038c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d160      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ec:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	0211      	lsls	r1, r2, #8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	0912      	lsrs	r2, r2, #4
 8003904:	0452      	lsls	r2, r2, #17
 8003906:	430a      	orrs	r2, r1
 8003908:	492a      	ldr	r1, [pc, #168]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]
 800390e:	e027      	b.n	8003960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d112      	bne.n	800393c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800391e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6892      	ldr	r2, [r2, #8]
 8003926:	0211      	lsls	r1, r2, #8
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6912      	ldr	r2, [r2, #16]
 800392c:	0852      	lsrs	r2, r2, #1
 800392e:	3a01      	subs	r2, #1
 8003930:	0552      	lsls	r2, r2, #21
 8003932:	430a      	orrs	r2, r1
 8003934:	491f      	ldr	r1, [pc, #124]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	610b      	str	r3, [r1, #16]
 800393a:	e011      	b.n	8003960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	0211      	lsls	r1, r2, #8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6952      	ldr	r2, [r2, #20]
 8003952:	0852      	lsrs	r2, r2, #1
 8003954:	3a01      	subs	r2, #1
 8003956:	0652      	lsls	r2, r2, #25
 8003958:	430a      	orrs	r2, r1
 800395a:	4916      	ldr	r1, [pc, #88]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800396a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fa70 	bl	8000e50 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003974:	f7fd fa6c 	bl	8000e50 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
          break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	4904      	ldr	r1, [pc, #16]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000

080039b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039c6:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039d2:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0203 	and.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10d      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
       ||
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ea:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
       ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d047      	beq.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e044      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d018      	beq.n	8003a3e <RCCEx_PLLSAI2_Config+0x86>
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d825      	bhi.n	8003a5c <RCCEx_PLLSAI2_Config+0xa4>
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d002      	beq.n	8003a1a <RCCEx_PLLSAI2_Config+0x62>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d009      	beq.n	8003a2c <RCCEx_PLLSAI2_Config+0x74>
 8003a18:	e020      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a1a:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11d      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2a:	e01a      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e013      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a3e:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a5a:	e006      	b.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a60:	e004      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	430b      	orrs	r3, r1
 8003a88:	4939      	ldr	r1, [pc, #228]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d167      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa0:	f7fd f9d6 	bl	8000e50 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa6:	e009      	b.n	8003abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa8:	f7fd f9d2 	bl	8000e50 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aba:	e005      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ef      	bne.n	8003aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d14a      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d111      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
 8003ae4:	0211      	lsls	r1, r2, #8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	0912      	lsrs	r2, r2, #4
 8003aec:	0452      	lsls	r2, r2, #17
 8003aee:	430a      	orrs	r2, r1
 8003af0:	491f      	ldr	r1, [pc, #124]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	614b      	str	r3, [r1, #20]
 8003af6:	e011      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6892      	ldr	r2, [r2, #8]
 8003b08:	0211      	lsls	r1, r2, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6912      	ldr	r2, [r2, #16]
 8003b0e:	0852      	lsrs	r2, r2, #1
 8003b10:	3a01      	subs	r2, #1
 8003b12:	0652      	lsls	r2, r2, #25
 8003b14:	430a      	orrs	r2, r1
 8003b16:	4916      	ldr	r1, [pc, #88]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd f992 	bl	8000e50 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2e:	e009      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b30:	f7fd f98e 	bl	8000e50 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d902      	bls.n	8003b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73fb      	strb	r3, [r7, #15]
          break;
 8003b42:	e005      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4904      	ldr	r1, [pc, #16]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e049      	b.n	8003c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f841 	bl	8003c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 f9f8 	bl	8003fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e04f      	b.n	8003cf0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a23      	ldr	r2, [pc, #140]	; (8003cfc <HAL_TIM_Base_Start_IT+0xc4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01d      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x76>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d018      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x76>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d013      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x76>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x76>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d009      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x76>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_TIM_Base_Start_IT+0x76>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d115      	bne.n	8003cda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d015      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0xb4>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc6:	d011      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd8:	e008      	b.n	8003cec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	e000      	b.n	8003cee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	00010007 	.word	0x00010007

08003d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0202 	mvn.w	r2, #2
 8003d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f905 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8f7 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f908 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0204 	mvn.w	r2, #4
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8db 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8cd 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f8de 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0208 	mvn.w	r2, #8
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2204      	movs	r2, #4
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8b1 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8a3 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8b4 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f887 	bl	8003f6a <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f879 	bl	8003f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f88a 	bl	8003f7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10e      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0201 	mvn.w	r2, #1
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fde2 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f914 	bl	80040f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d10e      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d107      	bne.n	8003ef6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f907 	bl	8004104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d107      	bne.n	8003f22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f838 	bl	8003f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0220 	mvn.w	r2, #32
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8c7 	bl	80040dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a40      	ldr	r2, [pc, #256]	; (80040bc <TIM_Base_SetConfig+0x114>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d013      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d00f      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3d      	ldr	r2, [pc, #244]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00b      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3c      	ldr	r2, [pc, #240]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d007      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3b      	ldr	r2, [pc, #236]	; (80040c8 <TIM_Base_SetConfig+0x120>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d108      	bne.n	8003ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	; (80040bc <TIM_Base_SetConfig+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01f      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004008:	d01b      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2c      	ldr	r2, [pc, #176]	; (80040c0 <TIM_Base_SetConfig+0x118>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d017      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <TIM_Base_SetConfig+0x11c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <TIM_Base_SetConfig+0x120>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00f      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a29      	ldr	r2, [pc, #164]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <TIM_Base_SetConfig+0x128>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <TIM_Base_SetConfig+0x12c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <TIM_Base_SetConfig+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <TIM_Base_SetConfig+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00f      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <TIM_Base_SetConfig+0x124>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <TIM_Base_SetConfig+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d007      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <TIM_Base_SetConfig+0x12c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_Base_SetConfig+0xf8>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <TIM_Base_SetConfig+0x130>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	615a      	str	r2, [r3, #20]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40013400 	.word	0x40013400
 80040d0:	40014000 	.word	0x40014000
 80040d4:	40014400 	.word	0x40014400
 80040d8:	40014800 	.word	0x40014800

080040dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e040      	b.n	80041ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fccc 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2224      	movs	r2, #36	; 0x24
 8004144:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0201 	bic.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f992 	bl	8004480 <UART_SetConfig>
 800415c:	4603      	mov	r3, r0
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e022      	b.n	80041ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fc10 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fc97 	bl	8004ad8 <UART_CheckIdleState>
 80041aa:	4603      	mov	r3, r0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	f040 8082 	bne.w	80042d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_UART_Transmit+0x26>
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e07a      	b.n	80042d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Transmit+0x38>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e073      	b.n	80042d4 <HAL_UART_Transmit+0x120>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2221      	movs	r2, #33	; 0x21
 8004200:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004202:	f7fc fe25 	bl	8000e50 <HAL_GetTick>
 8004206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	d108      	bne.n	8004234 <HAL_UART_Transmit+0x80>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	e003      	b.n	800423c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004244:	e02d      	b.n	80042a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fc8a 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e039      	b.n	80042d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	881a      	ldrh	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004272:	b292      	uxth	r2, r2
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	3302      	adds	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	e008      	b.n	8004290 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	b292      	uxth	r2, r2
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3301      	adds	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1cb      	bne.n	8004246 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2140      	movs	r1, #64	; 0x40
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fc56 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e005      	b.n	80042d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	f040 80bf 	bne.w	8004474 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_UART_Receive+0x26>
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0b7      	b.n	8004476 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_UART_Receive+0x38>
 8004310:	2302      	movs	r3, #2
 8004312:	e0b0      	b.n	8004476 <HAL_UART_Receive+0x19a>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2222      	movs	r2, #34	; 0x22
 8004328:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004330:	f7fc fd8e 	bl	8000e50 <HAL_GetTick>
 8004334:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	88fa      	ldrh	r2, [r7, #6]
 8004342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434e:	d10e      	bne.n	800436e <HAL_UART_Receive+0x92>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_UART_Receive+0x88>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800435e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004362:	e02d      	b.n	80043c0 <HAL_UART_Receive+0xe4>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	22ff      	movs	r2, #255	; 0xff
 8004368:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800436c:	e028      	b.n	80043c0 <HAL_UART_Receive+0xe4>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <HAL_UART_Receive+0xb6>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <HAL_UART_Receive+0xac>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004386:	e01b      	b.n	80043c0 <HAL_UART_Receive+0xe4>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	227f      	movs	r2, #127	; 0x7f
 800438c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004390:	e016      	b.n	80043c0 <HAL_UART_Receive+0xe4>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800439a:	d10d      	bne.n	80043b8 <HAL_UART_Receive+0xdc>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_UART_Receive+0xd2>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	227f      	movs	r2, #127	; 0x7f
 80043a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043ac:	e008      	b.n	80043c0 <HAL_UART_Receive+0xe4>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	223f      	movs	r2, #63	; 0x3f
 80043b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Receive+0xe4>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d108      	bne.n	80043e4 <HAL_UART_Receive+0x108>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e003      	b.n	80043ec <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80043f4:	e033      	b.n	800445e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2120      	movs	r1, #32
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fbb2 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e032      	b.n	8004476 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10c      	bne.n	8004430 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800441c:	b29a      	uxth	r2, r3
 800441e:	8a7b      	ldrh	r3, [r7, #18]
 8004420:	4013      	ands	r3, r2
 8004422:	b29a      	uxth	r2, r3
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	3302      	adds	r3, #2
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	e00d      	b.n	800444c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004436:	b29b      	uxth	r3, r3
 8004438:	b2da      	uxtb	r2, r3
 800443a:	8a7b      	ldrh	r3, [r7, #18]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4013      	ands	r3, r2
 8004440:	b2da      	uxtb	r2, r3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3301      	adds	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1c5      	bne.n	80043f6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4bad      	ldr	r3, [pc, #692]	; (8004760 <UART_SetConfig+0x2e0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	69f9      	ldr	r1, [r7, #28]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4aa2      	ldr	r2, [pc, #648]	; (8004764 <UART_SetConfig+0x2e4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a99      	ldr	r2, [pc, #612]	; (8004768 <UART_SetConfig+0x2e8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d121      	bne.n	800454a <UART_SetConfig+0xca>
 8004506:	4b99      	ldr	r3, [pc, #612]	; (800476c <UART_SetConfig+0x2ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b03      	cmp	r3, #3
 8004512:	d817      	bhi.n	8004544 <UART_SetConfig+0xc4>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0x9c>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	0800452d 	.word	0x0800452d
 8004520:	08004539 	.word	0x08004539
 8004524:	08004533 	.word	0x08004533
 8004528:	0800453f 	.word	0x0800453f
 800452c:	2301      	movs	r3, #1
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	e0e7      	b.n	8004702 <UART_SetConfig+0x282>
 8004532:	2302      	movs	r3, #2
 8004534:	76fb      	strb	r3, [r7, #27]
 8004536:	e0e4      	b.n	8004702 <UART_SetConfig+0x282>
 8004538:	2304      	movs	r3, #4
 800453a:	76fb      	strb	r3, [r7, #27]
 800453c:	e0e1      	b.n	8004702 <UART_SetConfig+0x282>
 800453e:	2308      	movs	r3, #8
 8004540:	76fb      	strb	r3, [r7, #27]
 8004542:	e0de      	b.n	8004702 <UART_SetConfig+0x282>
 8004544:	2310      	movs	r3, #16
 8004546:	76fb      	strb	r3, [r7, #27]
 8004548:	e0db      	b.n	8004702 <UART_SetConfig+0x282>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a88      	ldr	r2, [pc, #544]	; (8004770 <UART_SetConfig+0x2f0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d132      	bne.n	80045ba <UART_SetConfig+0x13a>
 8004554:	4b85      	ldr	r3, [pc, #532]	; (800476c <UART_SetConfig+0x2ec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b0c      	cmp	r3, #12
 8004560:	d828      	bhi.n	80045b4 <UART_SetConfig+0x134>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0xe8>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	0800459d 	.word	0x0800459d
 800456c:	080045b5 	.word	0x080045b5
 8004570:	080045b5 	.word	0x080045b5
 8004574:	080045b5 	.word	0x080045b5
 8004578:	080045a9 	.word	0x080045a9
 800457c:	080045b5 	.word	0x080045b5
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080045b5 	.word	0x080045b5
 8004588:	080045a3 	.word	0x080045a3
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045b5 	.word	0x080045b5
 8004598:	080045af 	.word	0x080045af
 800459c:	2300      	movs	r3, #0
 800459e:	76fb      	strb	r3, [r7, #27]
 80045a0:	e0af      	b.n	8004702 <UART_SetConfig+0x282>
 80045a2:	2302      	movs	r3, #2
 80045a4:	76fb      	strb	r3, [r7, #27]
 80045a6:	e0ac      	b.n	8004702 <UART_SetConfig+0x282>
 80045a8:	2304      	movs	r3, #4
 80045aa:	76fb      	strb	r3, [r7, #27]
 80045ac:	e0a9      	b.n	8004702 <UART_SetConfig+0x282>
 80045ae:	2308      	movs	r3, #8
 80045b0:	76fb      	strb	r3, [r7, #27]
 80045b2:	e0a6      	b.n	8004702 <UART_SetConfig+0x282>
 80045b4:	2310      	movs	r3, #16
 80045b6:	76fb      	strb	r3, [r7, #27]
 80045b8:	e0a3      	b.n	8004702 <UART_SetConfig+0x282>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6d      	ldr	r2, [pc, #436]	; (8004774 <UART_SetConfig+0x2f4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d120      	bne.n	8004606 <UART_SetConfig+0x186>
 80045c4:	4b69      	ldr	r3, [pc, #420]	; (800476c <UART_SetConfig+0x2ec>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d013      	beq.n	80045fa <UART_SetConfig+0x17a>
 80045d2:	2b30      	cmp	r3, #48	; 0x30
 80045d4:	d814      	bhi.n	8004600 <UART_SetConfig+0x180>
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d009      	beq.n	80045ee <UART_SetConfig+0x16e>
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d810      	bhi.n	8004600 <UART_SetConfig+0x180>
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <UART_SetConfig+0x168>
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d006      	beq.n	80045f4 <UART_SetConfig+0x174>
 80045e6:	e00b      	b.n	8004600 <UART_SetConfig+0x180>
 80045e8:	2300      	movs	r3, #0
 80045ea:	76fb      	strb	r3, [r7, #27]
 80045ec:	e089      	b.n	8004702 <UART_SetConfig+0x282>
 80045ee:	2302      	movs	r3, #2
 80045f0:	76fb      	strb	r3, [r7, #27]
 80045f2:	e086      	b.n	8004702 <UART_SetConfig+0x282>
 80045f4:	2304      	movs	r3, #4
 80045f6:	76fb      	strb	r3, [r7, #27]
 80045f8:	e083      	b.n	8004702 <UART_SetConfig+0x282>
 80045fa:	2308      	movs	r3, #8
 80045fc:	76fb      	strb	r3, [r7, #27]
 80045fe:	e080      	b.n	8004702 <UART_SetConfig+0x282>
 8004600:	2310      	movs	r3, #16
 8004602:	76fb      	strb	r3, [r7, #27]
 8004604:	e07d      	b.n	8004702 <UART_SetConfig+0x282>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a5b      	ldr	r2, [pc, #364]	; (8004778 <UART_SetConfig+0x2f8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d120      	bne.n	8004652 <UART_SetConfig+0x1d2>
 8004610:	4b56      	ldr	r3, [pc, #344]	; (800476c <UART_SetConfig+0x2ec>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800461a:	2bc0      	cmp	r3, #192	; 0xc0
 800461c:	d013      	beq.n	8004646 <UART_SetConfig+0x1c6>
 800461e:	2bc0      	cmp	r3, #192	; 0xc0
 8004620:	d814      	bhi.n	800464c <UART_SetConfig+0x1cc>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d009      	beq.n	800463a <UART_SetConfig+0x1ba>
 8004626:	2b80      	cmp	r3, #128	; 0x80
 8004628:	d810      	bhi.n	800464c <UART_SetConfig+0x1cc>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <UART_SetConfig+0x1b4>
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d006      	beq.n	8004640 <UART_SetConfig+0x1c0>
 8004632:	e00b      	b.n	800464c <UART_SetConfig+0x1cc>
 8004634:	2300      	movs	r3, #0
 8004636:	76fb      	strb	r3, [r7, #27]
 8004638:	e063      	b.n	8004702 <UART_SetConfig+0x282>
 800463a:	2302      	movs	r3, #2
 800463c:	76fb      	strb	r3, [r7, #27]
 800463e:	e060      	b.n	8004702 <UART_SetConfig+0x282>
 8004640:	2304      	movs	r3, #4
 8004642:	76fb      	strb	r3, [r7, #27]
 8004644:	e05d      	b.n	8004702 <UART_SetConfig+0x282>
 8004646:	2308      	movs	r3, #8
 8004648:	76fb      	strb	r3, [r7, #27]
 800464a:	e05a      	b.n	8004702 <UART_SetConfig+0x282>
 800464c:	2310      	movs	r3, #16
 800464e:	76fb      	strb	r3, [r7, #27]
 8004650:	e057      	b.n	8004702 <UART_SetConfig+0x282>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a49      	ldr	r2, [pc, #292]	; (800477c <UART_SetConfig+0x2fc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d125      	bne.n	80046a8 <UART_SetConfig+0x228>
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <UART_SetConfig+0x2ec>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466a:	d017      	beq.n	800469c <UART_SetConfig+0x21c>
 800466c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004670:	d817      	bhi.n	80046a2 <UART_SetConfig+0x222>
 8004672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004676:	d00b      	beq.n	8004690 <UART_SetConfig+0x210>
 8004678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467c:	d811      	bhi.n	80046a2 <UART_SetConfig+0x222>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <UART_SetConfig+0x20a>
 8004682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004686:	d006      	beq.n	8004696 <UART_SetConfig+0x216>
 8004688:	e00b      	b.n	80046a2 <UART_SetConfig+0x222>
 800468a:	2300      	movs	r3, #0
 800468c:	76fb      	strb	r3, [r7, #27]
 800468e:	e038      	b.n	8004702 <UART_SetConfig+0x282>
 8004690:	2302      	movs	r3, #2
 8004692:	76fb      	strb	r3, [r7, #27]
 8004694:	e035      	b.n	8004702 <UART_SetConfig+0x282>
 8004696:	2304      	movs	r3, #4
 8004698:	76fb      	strb	r3, [r7, #27]
 800469a:	e032      	b.n	8004702 <UART_SetConfig+0x282>
 800469c:	2308      	movs	r3, #8
 800469e:	76fb      	strb	r3, [r7, #27]
 80046a0:	e02f      	b.n	8004702 <UART_SetConfig+0x282>
 80046a2:	2310      	movs	r3, #16
 80046a4:	76fb      	strb	r3, [r7, #27]
 80046a6:	e02c      	b.n	8004702 <UART_SetConfig+0x282>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2d      	ldr	r2, [pc, #180]	; (8004764 <UART_SetConfig+0x2e4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d125      	bne.n	80046fe <UART_SetConfig+0x27e>
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <UART_SetConfig+0x2ec>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c0:	d017      	beq.n	80046f2 <UART_SetConfig+0x272>
 80046c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c6:	d817      	bhi.n	80046f8 <UART_SetConfig+0x278>
 80046c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046cc:	d00b      	beq.n	80046e6 <UART_SetConfig+0x266>
 80046ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d2:	d811      	bhi.n	80046f8 <UART_SetConfig+0x278>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <UART_SetConfig+0x260>
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d006      	beq.n	80046ec <UART_SetConfig+0x26c>
 80046de:	e00b      	b.n	80046f8 <UART_SetConfig+0x278>
 80046e0:	2300      	movs	r3, #0
 80046e2:	76fb      	strb	r3, [r7, #27]
 80046e4:	e00d      	b.n	8004702 <UART_SetConfig+0x282>
 80046e6:	2302      	movs	r3, #2
 80046e8:	76fb      	strb	r3, [r7, #27]
 80046ea:	e00a      	b.n	8004702 <UART_SetConfig+0x282>
 80046ec:	2304      	movs	r3, #4
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e007      	b.n	8004702 <UART_SetConfig+0x282>
 80046f2:	2308      	movs	r3, #8
 80046f4:	76fb      	strb	r3, [r7, #27]
 80046f6:	e004      	b.n	8004702 <UART_SetConfig+0x282>
 80046f8:	2310      	movs	r3, #16
 80046fa:	76fb      	strb	r3, [r7, #27]
 80046fc:	e001      	b.n	8004702 <UART_SetConfig+0x282>
 80046fe:	2310      	movs	r3, #16
 8004700:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <UART_SetConfig+0x2e4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	f040 8087 	bne.w	800481c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800470e:	7efb      	ldrb	r3, [r7, #27]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d837      	bhi.n	8004784 <UART_SetConfig+0x304>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <UART_SetConfig+0x29c>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004741 	.word	0x08004741
 8004720:	08004785 	.word	0x08004785
 8004724:	08004749 	.word	0x08004749
 8004728:	08004785 	.word	0x08004785
 800472c:	0800474f 	.word	0x0800474f
 8004730:	08004785 	.word	0x08004785
 8004734:	08004785 	.word	0x08004785
 8004738:	08004785 	.word	0x08004785
 800473c:	08004757 	.word	0x08004757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004740:	f7fe fc9e 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004744:	6178      	str	r0, [r7, #20]
        break;
 8004746:	e022      	b.n	800478e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <UART_SetConfig+0x300>)
 800474a:	617b      	str	r3, [r7, #20]
        break;
 800474c:	e01f      	b.n	800478e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474e:	f7fe fbff 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8004752:	6178      	str	r0, [r7, #20]
        break;
 8004754:	e01b      	b.n	800478e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	617b      	str	r3, [r7, #20]
        break;
 800475c:	e017      	b.n	800478e <UART_SetConfig+0x30e>
 800475e:	bf00      	nop
 8004760:	efff69f3 	.word	0xefff69f3
 8004764:	40008000 	.word	0x40008000
 8004768:	40013800 	.word	0x40013800
 800476c:	40021000 	.word	0x40021000
 8004770:	40004400 	.word	0x40004400
 8004774:	40004800 	.word	0x40004800
 8004778:	40004c00 	.word	0x40004c00
 800477c:	40005000 	.word	0x40005000
 8004780:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	76bb      	strb	r3, [r7, #26]
        break;
 800478c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80f1 	beq.w	8004978 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d305      	bcc.n	80047b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d902      	bls.n	80047b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	76bb      	strb	r3, [r7, #26]
 80047b6:	e0df      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	020b      	lsls	r3, r1, #8
 80047ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047ce:	0202      	lsls	r2, r0, #8
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	6849      	ldr	r1, [r1, #4]
 80047d4:	0849      	lsrs	r1, r1, #1
 80047d6:	4608      	mov	r0, r1
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	1814      	adds	r4, r2, r0
 80047de:	eb43 0501 	adc.w	r5, r3, r1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	f7fb fd3e 	bl	8000270 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4613      	mov	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004802:	d308      	bcc.n	8004816 <UART_SetConfig+0x396>
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480a:	d204      	bcs.n	8004816 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	e0b0      	b.n	8004978 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	76bb      	strb	r3, [r7, #26]
 800481a:	e0ad      	b.n	8004978 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d15c      	bne.n	80048e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004826:	7efb      	ldrb	r3, [r7, #27]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d828      	bhi.n	800487e <UART_SetConfig+0x3fe>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <UART_SetConfig+0x3b4>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004859 	.word	0x08004859
 8004838:	08004861 	.word	0x08004861
 800483c:	08004869 	.word	0x08004869
 8004840:	0800487f 	.word	0x0800487f
 8004844:	0800486f 	.word	0x0800486f
 8004848:	0800487f 	.word	0x0800487f
 800484c:	0800487f 	.word	0x0800487f
 8004850:	0800487f 	.word	0x0800487f
 8004854:	08004877 	.word	0x08004877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004858:	f7fe fc12 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 800485c:	6178      	str	r0, [r7, #20]
        break;
 800485e:	e013      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fe fc24 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 8004864:	6178      	str	r0, [r7, #20]
        break;
 8004866:	e00f      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004868:	4b49      	ldr	r3, [pc, #292]	; (8004990 <UART_SetConfig+0x510>)
 800486a:	617b      	str	r3, [r7, #20]
        break;
 800486c:	e00c      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486e:	f7fe fb6f 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8004872:	6178      	str	r0, [r7, #20]
        break;
 8004874:	e008      	b.n	8004888 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	617b      	str	r3, [r7, #20]
        break;
 800487c:	e004      	b.n	8004888 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	76bb      	strb	r3, [r7, #26]
        break;
 8004886:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d074      	beq.n	8004978 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	005a      	lsls	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b0f      	cmp	r3, #15
 80048aa:	d916      	bls.n	80048da <UART_SetConfig+0x45a>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b2:	d212      	bcs.n	80048da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f023 030f 	bic.w	r3, r3, #15
 80048bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	89fa      	ldrh	r2, [r7, #14]
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	e04e      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	76bb      	strb	r3, [r7, #26]
 80048de:	e04b      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048e0:	7efb      	ldrb	r3, [r7, #27]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d827      	bhi.n	8004936 <UART_SetConfig+0x4b6>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x46c>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004911 	.word	0x08004911
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004927 	.word	0x08004927
 8004900:	08004937 	.word	0x08004937
 8004904:	08004937 	.word	0x08004937
 8004908:	08004937 	.word	0x08004937
 800490c:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fe fbb6 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004914:	6178      	str	r0, [r7, #20]
        break;
 8004916:	e013      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fbc8 	bl	80030ac <HAL_RCC_GetPCLK2Freq>
 800491c:	6178      	str	r0, [r7, #20]
        break;
 800491e:	e00f      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <UART_SetConfig+0x510>)
 8004922:	617b      	str	r3, [r7, #20]
        break;
 8004924:	e00c      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe fb13 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 800492a:	6178      	str	r0, [r7, #20]
        break;
 800492c:	e008      	b.n	8004940 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	617b      	str	r3, [r7, #20]
        break;
 8004934:	e004      	b.n	8004940 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	76bb      	strb	r3, [r7, #26]
        break;
 800493e:	bf00      	nop
    }

    if (pclk != 0U)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	085a      	lsrs	r2, r3, #1
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	441a      	add	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	b29b      	uxth	r3, r3
 800495a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d908      	bls.n	8004974 <UART_SetConfig+0x4f4>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d204      	bcs.n	8004974 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	e001      	b.n	8004978 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004984:	7ebb      	ldrb	r3, [r7, #26]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bdb0      	pop	{r4, r5, r7, pc}
 800498e:	bf00      	nop
 8004990:	00f42400 	.word	0x00f42400

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc f9b2 	bl	8000e50 <HAL_GetTick>
 8004aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10e      	bne.n	8004b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f82d 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e023      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d10e      	bne.n	8004b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f817 	bl	8004b6a <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00d      	b.n	8004b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b7a:	e05e      	b.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b82:	d05a      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b84:	f7fc f964 	bl	8000e50 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d302      	bcc.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11b      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ba8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e043      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02c      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d124      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e00f      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d091      	beq.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c62:	b084      	sub	sp, #16
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	f107 001c 	add.w	r0, r7, #28
 8004c70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f001 f9cf 	bl	8006024 <USB_CoreReset>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c9c:	e005      	b.n	8004caa <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cb6:	b004      	add	sp, #16
 8004cb8:	4770      	bx	lr
	...

08004cbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d165      	bne.n	8004d9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4a3e      	ldr	r2, [pc, #248]	; (8004dcc <USB_SetTurnaroundTime+0x110>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d906      	bls.n	8004ce6 <USB_SetTurnaroundTime+0x2a>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4a3d      	ldr	r2, [pc, #244]	; (8004dd0 <USB_SetTurnaroundTime+0x114>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d202      	bcs.n	8004ce6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ce0:	230f      	movs	r3, #15
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	e05c      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4a39      	ldr	r2, [pc, #228]	; (8004dd0 <USB_SetTurnaroundTime+0x114>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d306      	bcc.n	8004cfc <USB_SetTurnaroundTime+0x40>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4a38      	ldr	r2, [pc, #224]	; (8004dd4 <USB_SetTurnaroundTime+0x118>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d202      	bcs.n	8004cfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004cf6:	230e      	movs	r3, #14
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e051      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4a35      	ldr	r2, [pc, #212]	; (8004dd4 <USB_SetTurnaroundTime+0x118>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d306      	bcc.n	8004d12 <USB_SetTurnaroundTime+0x56>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <USB_SetTurnaroundTime+0x11c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d202      	bcs.n	8004d12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d0c:	230d      	movs	r3, #13
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	e046      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4a30      	ldr	r2, [pc, #192]	; (8004dd8 <USB_SetTurnaroundTime+0x11c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d306      	bcc.n	8004d28 <USB_SetTurnaroundTime+0x6c>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4a2f      	ldr	r2, [pc, #188]	; (8004ddc <USB_SetTurnaroundTime+0x120>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d802      	bhi.n	8004d28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d22:	230c      	movs	r3, #12
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e03b      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a2c      	ldr	r2, [pc, #176]	; (8004ddc <USB_SetTurnaroundTime+0x120>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d906      	bls.n	8004d3e <USB_SetTurnaroundTime+0x82>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4a2b      	ldr	r2, [pc, #172]	; (8004de0 <USB_SetTurnaroundTime+0x124>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d802      	bhi.n	8004d3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d38:	230b      	movs	r3, #11
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e030      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4a27      	ldr	r2, [pc, #156]	; (8004de0 <USB_SetTurnaroundTime+0x124>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d906      	bls.n	8004d54 <USB_SetTurnaroundTime+0x98>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4a26      	ldr	r2, [pc, #152]	; (8004de4 <USB_SetTurnaroundTime+0x128>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d802      	bhi.n	8004d54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d4e:	230a      	movs	r3, #10
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	e025      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a23      	ldr	r2, [pc, #140]	; (8004de4 <USB_SetTurnaroundTime+0x128>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d906      	bls.n	8004d6a <USB_SetTurnaroundTime+0xae>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4a22      	ldr	r2, [pc, #136]	; (8004de8 <USB_SetTurnaroundTime+0x12c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d202      	bcs.n	8004d6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d64:	2309      	movs	r3, #9
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e01a      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <USB_SetTurnaroundTime+0x12c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d306      	bcc.n	8004d80 <USB_SetTurnaroundTime+0xc4>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <USB_SetTurnaroundTime+0x130>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d802      	bhi.n	8004d80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	e00f      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <USB_SetTurnaroundTime+0x130>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d906      	bls.n	8004d96 <USB_SetTurnaroundTime+0xda>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <USB_SetTurnaroundTime+0x134>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d202      	bcs.n	8004d96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d90:	2307      	movs	r3, #7
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e004      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d96:	2306      	movs	r3, #6
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e001      	b.n	8004da0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d9c:	2309      	movs	r3, #9
 8004d9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	029b      	lsls	r3, r3, #10
 8004db4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	00d8acbf 	.word	0x00d8acbf
 8004dd0:	00e4e1c0 	.word	0x00e4e1c0
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	01067380 	.word	0x01067380
 8004ddc:	011a499f 	.word	0x011a499f
 8004de0:	01312cff 	.word	0x01312cff
 8004de4:	014ca43f 	.word	0x014ca43f
 8004de8:	016e3600 	.word	0x016e3600
 8004dec:	01a6ab1f 	.word	0x01a6ab1f
 8004df0:	01e84800 	.word	0x01e84800

08004df4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d106      	bne.n	8004e64 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e00b      	b.n	8004e7c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e001      	b.n	8004e7c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e003      	b.n	8004e84 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004e7c:	2032      	movs	r0, #50	; 0x32
 8004e7e:	f7fb fff3 	bl	8000e68 <HAL_Delay>

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	e009      	b.n	8004ec0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3340      	adds	r3, #64	; 0x40
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b0e      	cmp	r3, #14
 8004ec4:	d9f2      	bls.n	8004eac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d11c      	bne.n	8004f06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eda:	f043 0302 	orr.w	r3, r3, #2
 8004ede:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e005      	b.n	8004f12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	4619      	mov	r1, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	680b      	ldr	r3, [r1, #0]
 8004f30:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f32:	2103      	movs	r1, #3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f93d 	bl	80051b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f3a:	2110      	movs	r1, #16
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f8f1 	bl	8005124 <USB_FlushTxFifo>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f90f 	bl	8005170 <USB_FlushRxFifo>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	461a      	mov	r2, r3
 8004f64:	2300      	movs	r3, #0
 8004f66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	461a      	mov	r2, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	e043      	b.n	800500e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f9c:	d118      	bne.n	8004fd0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e013      	b.n	8004fe2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e008      	b.n	8004fe2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	461a      	mov	r2, r3
 8005002:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005006:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	3301      	adds	r3, #1
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d3b7      	bcc.n	8004f86 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	e043      	b.n	80050a4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800502e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005032:	d118      	bne.n	8005066 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	461a      	mov	r2, r3
 8005048:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e013      	b.n	8005078 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	461a      	mov	r2, r3
 800505e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e008      	b.n	8005078 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	461a      	mov	r2, r3
 8005074:	2300      	movs	r3, #0
 8005076:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	461a      	mov	r2, r3
 8005086:	2300      	movs	r3, #0
 8005088:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	461a      	mov	r2, r3
 8005098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800509c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	3301      	adds	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d3b7      	bcc.n	800501c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f043 0210 	orr.w	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <USB_DevInit+0x294>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f043 0208 	orr.w	r2, r3, #8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d107      	bne.n	800510e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005106:	f043 0304 	orr.w	r3, r3, #4
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800510e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800511a:	b004      	add	sp, #16
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	803c3800 	.word	0x803c3800

08005124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	019b      	lsls	r3, r3, #6
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <USB_FlushTxFifo+0x48>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d901      	bls.n	8005150 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e006      	b.n	800515e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b20      	cmp	r3, #32
 800515a:	d0f0      	beq.n	800513e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	00030d40 	.word	0x00030d40

08005170 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2210      	movs	r2, #16
 8005180:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3301      	adds	r3, #1
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a09      	ldr	r2, [pc, #36]	; (80051b0 <USB_FlushRxFifo+0x40>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e006      	b.n	80051a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	2b10      	cmp	r3, #16
 800519e:	d0f0      	beq.n	8005182 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	00030d40 	.word	0x00030d40

080051b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b087      	sub	sp, #28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0306 	and.w	r3, r3, #6
 80051fe:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d002      	beq.n	800520c <USB_GetDevSpeed+0x26>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b06      	cmp	r3, #6
 800520a:	d102      	bne.n	8005212 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800520c:	2302      	movs	r3, #2
 800520e:	75fb      	strb	r3, [r7, #23]
 8005210:	e001      	b.n	8005216 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005212:	230f      	movs	r3, #15
 8005214:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
}
 8005218:	4618      	mov	r0, r3
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d13a      	bne.n	80052b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2101      	movs	r1, #1
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800525e:	4313      	orrs	r3, r2
 8005260:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d155      	bne.n	8005324 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	78db      	ldrb	r3, [r3, #3]
 8005292:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005294:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	059b      	lsls	r3, r3, #22
 800529a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800529c:	4313      	orrs	r3, r2
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e036      	b.n	8005324 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	69da      	ldr	r2, [r3, #28]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	2101      	movs	r1, #1
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11a      	bne.n	8005324 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	78db      	ldrb	r3, [r3, #3]
 8005308:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800530a:	430b      	orrs	r3, r1
 800530c:	4313      	orrs	r3, r2
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005322:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d161      	bne.n	8005414 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005366:	d11f      	bne.n	80053a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	0151      	lsls	r1, r2, #5
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	440a      	add	r2, r1
 800537e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005382:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005386:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	2101      	movs	r1, #1
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c8:	4013      	ands	r3, r2
 80053ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f003 030f 	and.w	r3, r3, #15
 80053dc:	2101      	movs	r1, #1
 80053de:	fa01 f303 	lsl.w	r3, r1, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ec:	4013      	ands	r3, r2
 80053ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	0159      	lsls	r1, r3, #5
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	440b      	add	r3, r1
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	4619      	mov	r1, r3
 800540c:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <USB_DeactivateEndpoint+0x1b0>)
 800540e:	4013      	ands	r3, r2
 8005410:	600b      	str	r3, [r1, #0]
 8005412:	e060      	b.n	80054d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542a:	d11f      	bne.n	800546c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800544a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	2101      	movs	r1, #1
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	43db      	mvns	r3, r3
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548c:	4013      	ands	r3, r2
 800548e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	2101      	movs	r1, #1
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	43db      	mvns	r3, r3
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b0:	4013      	ands	r3, r2
 80054b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	0159      	lsls	r1, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	440b      	add	r3, r1
 80054ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ce:	4619      	mov	r1, r3
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <USB_DeactivateEndpoint+0x1b4>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	ec337800 	.word	0xec337800
 80054e8:	eff37800 	.word	0xeff37800

080054ec <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 810a 	bne.w	800571e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d132      	bne.n	8005578 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005530:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	0cdb      	lsrs	r3, r3, #19
 8005572:	04db      	lsls	r3, r3, #19
 8005574:	6113      	str	r3, [r2, #16]
 8005576:	e074      	b.n	8005662 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005592:	0cdb      	lsrs	r3, r3, #19
 8005594:	04db      	lsls	r3, r3, #19
 8005596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6959      	ldr	r1, [r3, #20]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	440b      	add	r3, r1
 80055d4:	1e59      	subs	r1, r3, #1
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	fbb1 f3f3 	udiv	r3, r1, r3
 80055de:	04d9      	lsls	r1, r3, #19
 80055e0:	4baf      	ldr	r3, [pc, #700]	; (80058a0 <USB_EPStartXfer+0x3b4>)
 80055e2:	400b      	ands	r3, r1
 80055e4:	6939      	ldr	r1, [r7, #16]
 80055e6:	0148      	lsls	r0, r1, #5
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	4401      	add	r1, r0
 80055ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	0148      	lsls	r0, r1, #5
 800560e:	6979      	ldr	r1, [r7, #20]
 8005610:	4401      	add	r1, r0
 8005612:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005616:	4313      	orrs	r3, r2
 8005618:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	78db      	ldrb	r3, [r3, #3]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d11f      	bne.n	8005662 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005640:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005660:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005680:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	78db      	ldrb	r3, [r3, #3]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d015      	beq.n	80056b6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8100 	beq.w	8005894 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	6979      	ldr	r1, [r7, #20]
 80056ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056b0:	4313      	orrs	r3, r2
 80056b2:	634b      	str	r3, [r1, #52]	; 0x34
 80056b4:	e0ee      	b.n	8005894 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d110      	bne.n	80056e8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e00f      	b.n	8005708 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005706:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68d9      	ldr	r1, [r3, #12]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781a      	ldrb	r2, [r3, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	b29b      	uxth	r3, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f9e2 	bl	8005ae0 <USB_WritePacket>
 800571c:	e0ba      	b.n	8005894 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005738:	0cdb      	lsrs	r3, r3, #19
 800573a:	04db      	lsls	r3, r3, #19
 800573c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800575c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005760:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d123      	bne.n	80057b2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005780:	6939      	ldr	r1, [r7, #16]
 8005782:	0148      	lsls	r0, r1, #5
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	4401      	add	r1, r0
 8005788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800578c:	4313      	orrs	r3, r2
 800578e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ae:	6113      	str	r3, [r2, #16]
 80057b0:	e033      	b.n	800581a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	4413      	add	r3, r2
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	89fb      	ldrh	r3, [r7, #14]
 80057d8:	04d9      	lsls	r1, r3, #19
 80057da:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <USB_EPStartXfer+0x3b4>)
 80057dc:	400b      	ands	r3, r1
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	0148      	lsls	r0, r1, #5
 80057e2:	6979      	ldr	r1, [r7, #20]
 80057e4:	4401      	add	r1, r0
 80057e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ea:	4313      	orrs	r3, r2
 80057ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	89f9      	ldrh	r1, [r7, #14]
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	0148      	lsls	r0, r1, #5
 800580e:	6979      	ldr	r1, [r7, #20]
 8005810:	4401      	add	r1, r0
 8005812:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005816:	4313      	orrs	r3, r2
 8005818:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	78db      	ldrb	r3, [r3, #3]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d128      	bne.n	8005874 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d110      	bne.n	8005854 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e00f      	b.n	8005874 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005872:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005892:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	1ff80000 	.word	0x1ff80000

080058a4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	f040 80ab 	bne.w	8005a18 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d132      	bne.n	8005930 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800590c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	0cdb      	lsrs	r3, r3, #19
 800592a:	04db      	lsls	r3, r3, #19
 800592c:	6113      	str	r3, [r2, #16]
 800592e:	e04e      	b.n	80059ce <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594a:	0cdb      	lsrs	r3, r3, #19
 800594c:	04db      	lsls	r3, r3, #19
 800594e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800596e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005972:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	d903      	bls.n	8005988 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	0148      	lsls	r0, r1, #5
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	4401      	add	r1, r0
 80059c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059ca:	4313      	orrs	r3, r2
 80059cc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ec:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d06d      	beq.n	8005ad2 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	2101      	movs	r1, #1
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	68f9      	ldr	r1, [r7, #12]
 8005a0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a12:	4313      	orrs	r3, r2
 8005a14:	634b      	str	r3, [r1, #52]	; 0x34
 8005a16:	e05c      	b.n	8005ad2 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a32:	0cdb      	lsrs	r3, r3, #19
 8005a34:	04db      	lsls	r3, r3, #19
 8005a36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	0148      	lsls	r0, r1, #5
 8005aa6:	68f9      	ldr	r1, [r7, #12]
 8005aa8:	4401      	add	r1, r0
 8005aaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	460b      	mov	r3, r1
 8005af0:	71fb      	strb	r3, [r7, #7]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005afe:	88bb      	ldrh	r3, [r7, #4]
 8005b00:	3303      	adds	r3, #3
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	e00f      	b.n	8005b2c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	031a      	lsls	r2, r3, #12
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b18:	461a      	mov	r2, r3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3304      	adds	r3, #4
 8005b24:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d3eb      	bcc.n	8005b0c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b089      	sub	sp, #36	; 0x24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	089b      	lsrs	r3, r3, #2
 8005b5e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e00b      	b.n	8005b7e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3304      	adds	r3, #4
 8005b76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3ef      	bcc.n	8005b66 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b86:	69fb      	ldr	r3, [r7, #28]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3724      	adds	r7, #36	; 0x24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d12c      	bne.n	8005c0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	db12      	blt.n	8005be8 <USB_EPSetStall+0x54>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00f      	beq.n	8005be8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005be6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e02b      	b.n	8005c62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	db12      	blt.n	8005c42 <USB_EPSetStall+0xae>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00f      	beq.n	8005c42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d128      	bne.n	8005cde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005caa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d003      	beq.n	8005cbc <USB_EPClearStall+0x4c>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d138      	bne.n	8005d2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e027      	b.n	8005d2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	78db      	ldrb	r3, [r3, #3]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d003      	beq.n	8005d0e <USB_EPClearStall+0x9e>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	78db      	ldrb	r3, [r3, #3]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d10f      	bne.n	8005d2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d76:	4313      	orrs	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db6:	f023 0302 	bic.w	r3, r3, #2
 8005dba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005de4:	f023 0303 	bic.w	r3, r3, #3
 8005de8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4013      	ands	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	0c1b      	lsrs	r3, r3, #16
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	b29b      	uxth	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4013      	ands	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f24:	68bb      	ldr	r3, [r7, #8]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	333c      	adds	r3, #60	; 0x3c
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <USB_EP0_OutStart+0x8c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d90a      	bls.n	8005fca <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc4:	d101      	bne.n	8005fca <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e024      	b.n	8006014 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fe8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff8:	f043 0318 	orr.w	r3, r3, #24
 8005ffc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006010:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	4f54300a 	.word	0x4f54300a

08006024 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a13      	ldr	r2, [pc, #76]	; (8006088 <USB_CoreReset+0x64>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e01b      	b.n	800607a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	daf2      	bge.n	8006030 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f043 0201 	orr.w	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3301      	adds	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a09      	ldr	r2, [pc, #36]	; (8006088 <USB_CoreReset+0x64>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e006      	b.n	800607a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d0f0      	beq.n	800605a <USB_CoreReset+0x36>

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	00030d40 	.word	0x00030d40

0800608c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006098:	2010      	movs	r0, #16
 800609a:	f002 f89d 	bl	80081d8 <USBD_static_malloc>
 800609e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d105      	bne.n	80060b2 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80060ae:	2302      	movs	r3, #2
 80060b0:	e01b      	b.n	80060ea <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7c1b      	ldrb	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2207      	movs	r2, #7
 80060c6:	875a      	strh	r2, [r3, #58]	; 0x3a
 80060c8:	e002      	b.n	80060d0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	220a      	movs	r2, #10
 80060ce:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80060d0:	2304      	movs	r3, #4
 80060d2:	2203      	movs	r2, #3
 80060d4:	2181      	movs	r1, #129	; 0x81
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fe7e 	bl	8007dd8 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80060fe:	2181      	movs	r1, #129	; 0x81
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fea7 	bl	8007e54 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006118:	2b00      	cmp	r3, #0
 800611a:	d009      	beq.n	8006130 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006122:	4618      	mov	r0, r3
 8006124:	f002 f866 	bl	80081f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800614c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e0e8      	b.n	8006332 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006168:	2b00      	cmp	r3, #0
 800616a:	d046      	beq.n	80061fa <USBD_HID_Setup+0xbe>
 800616c:	2b20      	cmp	r3, #32
 800616e:	f040 80d8 	bne.w	8006322 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	3b02      	subs	r3, #2
 8006178:	2b09      	cmp	r3, #9
 800617a:	d836      	bhi.n	80061ea <USBD_HID_Setup+0xae>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <USBD_HID_Setup+0x48>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061db 	.word	0x080061db
 8006188:	080061bb 	.word	0x080061bb
 800618c:	080061eb 	.word	0x080061eb
 8006190:	080061eb 	.word	0x080061eb
 8006194:	080061eb 	.word	0x080061eb
 8006198:	080061eb 	.word	0x080061eb
 800619c:	080061eb 	.word	0x080061eb
 80061a0:	080061eb 	.word	0x080061eb
 80061a4:	080061c9 	.word	0x080061c9
 80061a8:	080061ad 	.word	0x080061ad
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]
          break;
 80061b8:	e01e      	b.n	80061f8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fa4c 	bl	800765e <USBD_CtlSendData>
          break;
 80061c6:	e017      	b.n	80061f8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	885b      	ldrh	r3, [r3, #2]
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	605a      	str	r2, [r3, #4]
          break;
 80061d8:	e00e      	b.n	80061f8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3304      	adds	r3, #4
 80061de:	2201      	movs	r2, #1
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fa3b 	bl	800765e <USBD_CtlSendData>
          break;
 80061e8:	e006      	b.n	80061f8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 f9c5 	bl	800757c <USBD_CtlError>
          ret = USBD_FAIL;
 80061f2:	2303      	movs	r3, #3
 80061f4:	75fb      	strb	r3, [r7, #23]
          break;
 80061f6:	bf00      	nop
      }
      break;
 80061f8:	e09a      	b.n	8006330 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	2b0b      	cmp	r3, #11
 8006200:	f200 8086 	bhi.w	8006310 <USBD_HID_Setup+0x1d4>
 8006204:	a201      	add	r2, pc, #4	; (adr r2, 800620c <USBD_HID_Setup+0xd0>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	0800623d 	.word	0x0800623d
 8006210:	0800631f 	.word	0x0800631f
 8006214:	08006311 	.word	0x08006311
 8006218:	08006311 	.word	0x08006311
 800621c:	08006311 	.word	0x08006311
 8006220:	08006311 	.word	0x08006311
 8006224:	08006267 	.word	0x08006267
 8006228:	08006311 	.word	0x08006311
 800622c:	08006311 	.word	0x08006311
 8006230:	08006311 	.word	0x08006311
 8006234:	080062bf 	.word	0x080062bf
 8006238:	080062e9 	.word	0x080062e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b03      	cmp	r3, #3
 8006246:	d107      	bne.n	8006258 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006248:	f107 030a 	add.w	r3, r7, #10
 800624c:	2202      	movs	r2, #2
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 fa04 	bl	800765e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006256:	e063      	b.n	8006320 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 f98e 	bl	800757c <USBD_CtlError>
            ret = USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	75fb      	strb	r3, [r7, #23]
          break;
 8006264:	e05c      	b.n	8006320 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	885b      	ldrh	r3, [r3, #2]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b22      	cmp	r3, #34	; 0x22
 8006270:	d108      	bne.n	8006284 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	88db      	ldrh	r3, [r3, #6]
 8006276:	2b4a      	cmp	r3, #74	; 0x4a
 8006278:	bf28      	it	cs
 800627a:	234a      	movcs	r3, #74	; 0x4a
 800627c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800627e:	4b2f      	ldr	r3, [pc, #188]	; (800633c <USBD_HID_Setup+0x200>)
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	e015      	b.n	80062b0 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	885b      	ldrh	r3, [r3, #2]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b21      	cmp	r3, #33	; 0x21
 800628e:	d108      	bne.n	80062a2 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8006290:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <USBD_HID_Setup+0x204>)
 8006292:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	88db      	ldrh	r3, [r3, #6]
 8006298:	2b09      	cmp	r3, #9
 800629a:	bf28      	it	cs
 800629c:	2309      	movcs	r3, #9
 800629e:	82bb      	strh	r3, [r7, #20]
 80062a0:	e006      	b.n	80062b0 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f969 	bl	800757c <USBD_CtlError>
            ret = USBD_FAIL;
 80062aa:	2303      	movs	r3, #3
 80062ac:	75fb      	strb	r3, [r7, #23]
            break;
 80062ae:	e037      	b.n	8006320 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80062b0:	8abb      	ldrh	r3, [r7, #20]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6939      	ldr	r1, [r7, #16]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 f9d1 	bl	800765e <USBD_CtlSendData>
          break;
 80062bc:	e030      	b.n	8006320 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d107      	bne.n	80062da <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3308      	adds	r3, #8
 80062ce:	2201      	movs	r2, #1
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 f9c3 	bl	800765e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062d8:	e022      	b.n	8006320 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f94d 	bl	800757c <USBD_CtlError>
            ret = USBD_FAIL;
 80062e2:	2303      	movs	r3, #3
 80062e4:	75fb      	strb	r3, [r7, #23]
          break;
 80062e6:	e01b      	b.n	8006320 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	d106      	bne.n	8006302 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	885b      	ldrh	r3, [r3, #2]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006300:	e00e      	b.n	8006320 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f939 	bl	800757c <USBD_CtlError>
            ret = USBD_FAIL;
 800630a:	2303      	movs	r3, #3
 800630c:	75fb      	strb	r3, [r7, #23]
          break;
 800630e:	e007      	b.n	8006320 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 f932 	bl	800757c <USBD_CtlError>
          ret = USBD_FAIL;
 8006318:	2303      	movs	r3, #3
 800631a:	75fb      	strb	r3, [r7, #23]
          break;
 800631c:	e000      	b.n	8006320 <USBD_HID_Setup+0x1e4>
          break;
 800631e:	bf00      	nop
      }
      break;
 8006320:	e006      	b.n	8006330 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f929 	bl	800757c <USBD_CtlError>
      ret = USBD_FAIL;
 800632a:	2303      	movs	r3, #3
 800632c:	75fb      	strb	r3, [r7, #23]
      break;
 800632e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	200000c8 	.word	0x200000c8
 8006340:	200000b0 	.word	0x200000b0

08006344 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006358:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	e013      	b.n	800638c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b03      	cmp	r3, #3
 800636e:	d10c      	bne.n	800638a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	7b1b      	ldrb	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d108      	bne.n	800638a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2201      	movs	r2, #1
 800637c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	2181      	movs	r1, #129	; 0x81
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f001 fe69 	bl	800805c <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2222      	movs	r2, #34	; 0x22
 80063a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 80063a2:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20000044 	.word	0x20000044

080063b4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2222      	movs	r2, #34	; 0x22
 80063c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80063c2:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000068 	.word	0x20000068

080063d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2222      	movs	r2, #34	; 0x22
 80063e0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80063e2:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	2000008c 	.word	0x2000008c

080063f4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006406:	2200      	movs	r2, #0
 8006408:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	220a      	movs	r2, #10
 8006424:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006426:	4b03      	ldr	r3, [pc, #12]	; (8006434 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	200000bc 	.word	0x200000bc

08006438 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	e01f      	b.n	8006490 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	79fa      	ldrb	r2, [r7, #7]
 8006482:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f001 fc29 	bl	8007cdc <USBD_LL_Init>
 800648a:	4603      	mov	r3, r0
 800648c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e016      	b.n	80064de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	f107 020e 	add.w	r2, r7, #14
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
 80064d4:	4602      	mov	r2, r0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fc40 	bl	8007d74 <USBD_LL_Start>
 80064f4:	4603      	mov	r3, r0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	4611      	mov	r1, r2
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	4798      	blx	r3
 800653e:	4603      	mov	r3, r0
 8006540:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d007      	beq.n	8006572 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	4611      	mov	r1, r2
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
  }

  return USBD_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 ffba 	bl	8007508 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d01a      	beq.n	80065ee <USBD_LL_SetupStage+0x72>
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d822      	bhi.n	8006602 <USBD_LL_SetupStage+0x86>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <USBD_LL_SetupStage+0x4a>
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d00a      	beq.n	80065da <USBD_LL_SetupStage+0x5e>
 80065c4:	e01d      	b.n	8006602 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa62 	bl	8006a98 <USBD_StdDevReq>
 80065d4:	4603      	mov	r3, r0
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e020      	b.n	800661c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fac6 	bl	8006b74 <USBD_StdItfReq>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]
      break;
 80065ec:	e016      	b.n	800661c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fb05 	bl	8006c06 <USBD_StdEPReq>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006600:	e00c      	b.n	800661c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006608:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800660c:	b2db      	uxtb	r3, r3
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fc55 	bl	8007ec0 <USBD_LL_StallEP>
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]
      break;
 800661a:	bf00      	nop
  }

  return ret;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	460b      	mov	r3, r1
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d138      	bne.n	80066ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006640:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006648:	2b03      	cmp	r3, #3
 800664a:	d14a      	bne.n	80066e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	429a      	cmp	r2, r3
 8006656:	d913      	bls.n	8006680 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	1ad2      	subs	r2, r2, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	4293      	cmp	r3, r2
 8006670:	bf28      	it	cs
 8006672:	4613      	movcs	r3, r2
 8006674:	461a      	mov	r2, r3
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f001 f81c 	bl	80076b6 <USBD_CtlContinueRx>
 800667e:	e030      	b.n	80066e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b03      	cmp	r3, #3
 800668a:	d10b      	bne.n	80066a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f001 f817 	bl	80076d8 <USBD_CtlSendStatus>
 80066aa:	e01a      	b.n	80066e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d114      	bne.n	80066e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	7afa      	ldrb	r2, [r7, #11]
 80066ce:	4611      	mov	r1, r2
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	4798      	blx	r3
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	e000      	b.n	80066e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	460b      	mov	r3, r1
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d16b      	bne.n	80067d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3314      	adds	r3, #20
 8006704:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800670c:	2b02      	cmp	r3, #2
 800670e:	d156      	bne.n	80067be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	429a      	cmp	r2, r3
 800671a:	d914      	bls.n	8006746 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	461a      	mov	r2, r3
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 ffae 	bl	8007694 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006738:	2300      	movs	r3, #0
 800673a:	2200      	movs	r2, #0
 800673c:	2100      	movs	r1, #0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f001 fcc4 	bl	80080cc <USBD_LL_PrepareReceive>
 8006744:	e03b      	b.n	80067be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	d11c      	bne.n	800678c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800675a:	429a      	cmp	r2, r3
 800675c:	d316      	bcc.n	800678c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006768:	429a      	cmp	r2, r3
 800676a:	d20f      	bcs.n	800678c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800676c:	2200      	movs	r2, #0
 800676e:	2100      	movs	r1, #0
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 ff8f 	bl	8007694 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800677e:	2300      	movs	r3, #0
 8006780:	2200      	movs	r2, #0
 8006782:	2100      	movs	r1, #0
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f001 fca1 	bl	80080cc <USBD_LL_PrepareReceive>
 800678a:	e018      	b.n	80067be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d10b      	bne.n	80067b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f001 fb84 	bl	8007ec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 ffa0 	bl	80076fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d122      	bne.n	800680e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff fe98 	bl	80064fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067d6:	e01a      	b.n	800680e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d114      	bne.n	800680e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00e      	beq.n	800680e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	7afa      	ldrb	r2, [r7, #11]
 80067fa:	4611      	mov	r1, r2
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	4798      	blx	r3
 8006800:	4603      	mov	r3, r0
 8006802:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	e000      	b.n	8006810 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006848:	2303      	movs	r3, #3
 800684a:	e02f      	b.n	80068ac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00f      	beq.n	8006876 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6852      	ldr	r2, [r2, #4]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	4611      	mov	r1, r2
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006876:	2340      	movs	r3, #64	; 0x40
 8006878:	2200      	movs	r2, #0
 800687a:	2100      	movs	r1, #0
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 faab 	bl	8007dd8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2240      	movs	r2, #64	; 0x40
 800688e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006892:	2340      	movs	r3, #64	; 0x40
 8006894:	2200      	movs	r2, #0
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fa9d 	bl	8007dd8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2204      	movs	r2, #4
 80068ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b04      	cmp	r3, #4
 8006912:	d106      	bne.n	8006922 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800691a:	b2da      	uxtb	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006942:	2303      	movs	r3, #3
 8006944:	e012      	b.n	800696c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b03      	cmp	r3, #3
 8006950:	d10b      	bne.n	800696a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800698a:	2303      	movs	r3, #3
 800698c:	e014      	b.n	80069b8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b03      	cmp	r3, #3
 8006998:	d10d      	bne.n	80069b6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	4611      	mov	r1, r2
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e014      	b.n	8006a04 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d10d      	bne.n	8006a02 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	4611      	mov	r1, r2
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6852      	ldr	r2, [r2, #4]
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	4798      	blx	r3
  }

  return USBD_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b087      	sub	sp, #28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a78:	8a3b      	ldrh	r3, [r7, #16]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	b21a      	sxth	r2, r3
 8006a7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	b21b      	sxth	r3, r3
 8006a86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a88:	89fb      	ldrh	r3, [r7, #14]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d005      	beq.n	8006abe <USBD_StdDevReq+0x26>
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d853      	bhi.n	8006b5e <USBD_StdDevReq+0xc6>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00b      	beq.n	8006ad2 <USBD_StdDevReq+0x3a>
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d14f      	bne.n	8006b5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	4798      	blx	r3
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad0:	e04a      	b.n	8006b68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	2b09      	cmp	r3, #9
 8006ad8:	d83b      	bhi.n	8006b52 <USBD_StdDevReq+0xba>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <USBD_StdDevReq+0x48>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006b49 	.word	0x08006b49
 8006ae8:	08006b53 	.word	0x08006b53
 8006aec:	08006b3f 	.word	0x08006b3f
 8006af0:	08006b53 	.word	0x08006b53
 8006af4:	08006b13 	.word	0x08006b13
 8006af8:	08006b09 	.word	0x08006b09
 8006afc:	08006b53 	.word	0x08006b53
 8006b00:	08006b2b 	.word	0x08006b2b
 8006b04:	08006b1d 	.word	0x08006b1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9de 	bl	8006ecc <USBD_GetDescriptor>
          break;
 8006b10:	e024      	b.n	8006b5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fb6d 	bl	80071f4 <USBD_SetAddress>
          break;
 8006b1a:	e01f      	b.n	8006b5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fbac 	bl	800727c <USBD_SetConfig>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]
          break;
 8006b28:	e018      	b.n	8006b5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fc4b 	bl	80073c8 <USBD_GetConfig>
          break;
 8006b32:	e013      	b.n	8006b5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fc7c 	bl	8007434 <USBD_GetStatus>
          break;
 8006b3c:	e00e      	b.n	8006b5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fcab 	bl	800749c <USBD_SetFeature>
          break;
 8006b46:	e009      	b.n	8006b5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fcba 	bl	80074c4 <USBD_ClrFeature>
          break;
 8006b50:	e004      	b.n	8006b5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fd11 	bl	800757c <USBD_CtlError>
          break;
 8006b5a:	bf00      	nop
      }
      break;
 8006b5c:	e004      	b.n	8006b68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fd0b 	bl	800757c <USBD_CtlError>
      break;
 8006b66:	bf00      	nop
  }

  return ret;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b8a:	2b40      	cmp	r3, #64	; 0x40
 8006b8c:	d005      	beq.n	8006b9a <USBD_StdItfReq+0x26>
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d82f      	bhi.n	8006bf2 <USBD_StdItfReq+0x7e>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <USBD_StdItfReq+0x26>
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	d12b      	bne.n	8006bf2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d81d      	bhi.n	8006be4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	889b      	ldrh	r3, [r3, #4]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d813      	bhi.n	8006bda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	88db      	ldrh	r3, [r3, #6]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d110      	bne.n	8006bee <USBD_StdItfReq+0x7a>
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10d      	bne.n	8006bee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fd80 	bl	80076d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bd8:	e009      	b.n	8006bee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fccd 	bl	800757c <USBD_CtlError>
          break;
 8006be2:	e004      	b.n	8006bee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fcc8 	bl	800757c <USBD_CtlError>
          break;
 8006bec:	e000      	b.n	8006bf0 <USBD_StdItfReq+0x7c>
          break;
 8006bee:	bf00      	nop
      }
      break;
 8006bf0:	e004      	b.n	8006bfc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fcc1 	bl	800757c <USBD_CtlError>
      break;
 8006bfa:	bf00      	nop
  }

  return ret;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	889b      	ldrh	r3, [r3, #4]
 8006c18:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d007      	beq.n	8006c36 <USBD_StdEPReq+0x30>
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	f200 8145 	bhi.w	8006eb6 <USBD_StdEPReq+0x2b0>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <USBD_StdEPReq+0x44>
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	f040 8140 	bne.w	8006eb6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
      break;
 8006c48:	e13a      	b.n	8006ec0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d007      	beq.n	8006c62 <USBD_StdEPReq+0x5c>
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	f300 8129 	bgt.w	8006eaa <USBD_StdEPReq+0x2a4>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d07f      	beq.n	8006d5c <USBD_StdEPReq+0x156>
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d03c      	beq.n	8006cda <USBD_StdEPReq+0xd4>
 8006c60:	e123      	b.n	8006eaa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d002      	beq.n	8006c74 <USBD_StdEPReq+0x6e>
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d016      	beq.n	8006ca0 <USBD_StdEPReq+0x9a>
 8006c72:	e02c      	b.n	8006cce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c74:	7bbb      	ldrb	r3, [r7, #14]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <USBD_StdEPReq+0x90>
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	2b80      	cmp	r3, #128	; 0x80
 8006c7e:	d00a      	beq.n	8006c96 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f91b 	bl	8007ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c8a:	2180      	movs	r1, #128	; 0x80
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f917 	bl	8007ec0 <USBD_LL_StallEP>
 8006c92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c94:	e020      	b.n	8006cd8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fc6f 	bl	800757c <USBD_CtlError>
              break;
 8006c9e:	e01b      	b.n	8006cd8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	885b      	ldrh	r3, [r3, #2]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10e      	bne.n	8006cc6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <USBD_StdEPReq+0xc0>
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	2b80      	cmp	r3, #128	; 0x80
 8006cb2:	d008      	beq.n	8006cc6 <USBD_StdEPReq+0xc0>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	88db      	ldrh	r3, [r3, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 f8fd 	bl	8007ec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fd06 	bl	80076d8 <USBD_CtlSendStatus>

              break;
 8006ccc:	e004      	b.n	8006cd8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fc53 	bl	800757c <USBD_CtlError>
              break;
 8006cd6:	bf00      	nop
          }
          break;
 8006cd8:	e0ec      	b.n	8006eb4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d002      	beq.n	8006cec <USBD_StdEPReq+0xe6>
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d016      	beq.n	8006d18 <USBD_StdEPReq+0x112>
 8006cea:	e030      	b.n	8006d4e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <USBD_StdEPReq+0x108>
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	2b80      	cmp	r3, #128	; 0x80
 8006cf6:	d00a      	beq.n	8006d0e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f8df 	bl	8007ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d02:	2180      	movs	r1, #128	; 0x80
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f8db 	bl	8007ec0 <USBD_LL_StallEP>
 8006d0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d0c:	e025      	b.n	8006d5a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fc33 	bl	800757c <USBD_CtlError>
              break;
 8006d16:	e020      	b.n	8006d5a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	885b      	ldrh	r3, [r3, #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11b      	bne.n	8006d58 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f8fc 	bl	8007f2c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fccf 	bl	80076d8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	4798      	blx	r3
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006d4c:	e004      	b.n	8006d58 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fc13 	bl	800757c <USBD_CtlError>
              break;
 8006d56:	e000      	b.n	8006d5a <USBD_StdEPReq+0x154>
              break;
 8006d58:	bf00      	nop
          }
          break;
 8006d5a:	e0ab      	b.n	8006eb4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d002      	beq.n	8006d6e <USBD_StdEPReq+0x168>
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d032      	beq.n	8006dd2 <USBD_StdEPReq+0x1cc>
 8006d6c:	e097      	b.n	8006e9e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <USBD_StdEPReq+0x17e>
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b80      	cmp	r3, #128	; 0x80
 8006d78:	d004      	beq.n	8006d84 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fbfd 	bl	800757c <USBD_CtlError>
                break;
 8006d82:	e091      	b.n	8006ea8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da0b      	bge.n	8006da4 <USBD_StdEPReq+0x19e>
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	3310      	adds	r3, #16
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4413      	add	r3, r2
 8006da0:	3304      	adds	r3, #4
 8006da2:	e00b      	b.n	8006dbc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4413      	add	r3, r2
 8006dba:	3304      	adds	r3, #4
 8006dbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fc47 	bl	800765e <USBD_CtlSendData>
              break;
 8006dd0:	e06a      	b.n	8006ea8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da11      	bge.n	8006dfe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3324      	adds	r3, #36	; 0x24
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d117      	bne.n	8006e24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fbc0 	bl	800757c <USBD_CtlError>
                  break;
 8006dfc:	e054      	b.n	8006ea8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d104      	bne.n	8006e24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fbad 	bl	800757c <USBD_CtlError>
                  break;
 8006e22:	e041      	b.n	8006ea8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da0b      	bge.n	8006e44 <USBD_StdEPReq+0x23e>
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	3310      	adds	r3, #16
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	4413      	add	r3, r2
 8006e40:	3304      	adds	r3, #4
 8006e42:	e00b      	b.n	8006e5c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <USBD_StdEPReq+0x264>
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d103      	bne.n	8006e72 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e00e      	b.n	8006e90 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 f88e 	bl	8007f98 <USBD_LL_IsStallEP>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2201      	movs	r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e002      	b.n	8006e90 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2202      	movs	r2, #2
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fbe1 	bl	800765e <USBD_CtlSendData>
              break;
 8006e9c:	e004      	b.n	8006ea8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fb6b 	bl	800757c <USBD_CtlError>
              break;
 8006ea6:	bf00      	nop
          }
          break;
 8006ea8:	e004      	b.n	8006eb4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fb65 	bl	800757c <USBD_CtlError>
          break;
 8006eb2:	bf00      	nop
      }
      break;
 8006eb4:	e004      	b.n	8006ec0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fb5f 	bl	800757c <USBD_CtlError>
      break;
 8006ebe:	bf00      	nop
  }

  return ret;
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	2b0e      	cmp	r3, #14
 8006eee:	f200 8152 	bhi.w	8007196 <USBD_GetDescriptor+0x2ca>
 8006ef2:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <USBD_GetDescriptor+0x2c>)
 8006ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef8:	08006f69 	.word	0x08006f69
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006fc1 	.word	0x08006fc1
 8006f04:	08007197 	.word	0x08007197
 8006f08:	08007197 	.word	0x08007197
 8006f0c:	08007137 	.word	0x08007137
 8006f10:	08007163 	.word	0x08007163
 8006f14:	08007197 	.word	0x08007197
 8006f18:	08007197 	.word	0x08007197
 8006f1c:	08007197 	.word	0x08007197
 8006f20:	08007197 	.word	0x08007197
 8006f24:	08007197 	.word	0x08007197
 8006f28:	08007197 	.word	0x08007197
 8006f2c:	08007197 	.word	0x08007197
 8006f30:	08006f35 	.word	0x08006f35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3a:	69db      	ldr	r3, [r3, #28]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	7c12      	ldrb	r2, [r2, #16]
 8006f4c:	f107 0108 	add.w	r1, r7, #8
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
 8006f54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f56:	e126      	b.n	80071a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb0e 	bl	800757c <USBD_CtlError>
        err++;
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	3301      	adds	r3, #1
 8006f64:	72fb      	strb	r3, [r7, #11]
      break;
 8006f66:	e11e      	b.n	80071a6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	7c12      	ldrb	r2, [r2, #16]
 8006f74:	f107 0108 	add.w	r1, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
      break;
 8006f7e:	e112      	b.n	80071a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7c1b      	ldrb	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10d      	bne.n	8006fa4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	f107 0208 	add.w	r2, r7, #8
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
 8006f98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fa2:	e100      	b.n	80071a6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	f107 0208 	add.w	r2, r7, #8
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	2202      	movs	r2, #2
 8006fbc:	701a      	strb	r2, [r3, #0]
      break;
 8006fbe:	e0f2      	b.n	80071a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	885b      	ldrh	r3, [r3, #2]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	f200 80ac 	bhi.w	8007124 <USBD_GetDescriptor+0x258>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USBD_GetDescriptor+0x108>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08006fed 	.word	0x08006fed
 8006fd8:	08007021 	.word	0x08007021
 8006fdc:	08007055 	.word	0x08007055
 8006fe0:	08007089 	.word	0x08007089
 8006fe4:	080070bd 	.word	0x080070bd
 8006fe8:	080070f1 	.word	0x080070f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	7c12      	ldrb	r2, [r2, #16]
 8007004:	f107 0108 	add.w	r1, r7, #8
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
 800700c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700e:	e091      	b.n	8007134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fab2 	bl	800757c <USBD_CtlError>
            err++;
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	3301      	adds	r3, #1
 800701c:	72fb      	strb	r3, [r7, #11]
          break;
 800701e:	e089      	b.n	8007134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7c12      	ldrb	r2, [r2, #16]
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007042:	e077      	b.n	8007134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa98 	bl	800757c <USBD_CtlError>
            err++;
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	3301      	adds	r3, #1
 8007050:	72fb      	strb	r3, [r7, #11]
          break;
 8007052:	e06f      	b.n	8007134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7c12      	ldrb	r2, [r2, #16]
 800706c:	f107 0108 	add.w	r1, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007076:	e05d      	b.n	8007134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa7e 	bl	800757c <USBD_CtlError>
            err++;
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	3301      	adds	r3, #1
 8007084:	72fb      	strb	r3, [r7, #11]
          break;
 8007086:	e055      	b.n	8007134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070aa:	e043      	b.n	8007134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa64 	bl	800757c <USBD_CtlError>
            err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ba:	e03b      	b.n	8007134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00b      	beq.n	80070e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7c12      	ldrb	r2, [r2, #16]
 80070d4:	f107 0108 	add.w	r1, r7, #8
 80070d8:	4610      	mov	r0, r2
 80070da:	4798      	blx	r3
 80070dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070de:	e029      	b.n	8007134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa4a 	bl	800757c <USBD_CtlError>
            err++;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	3301      	adds	r3, #1
 80070ec:	72fb      	strb	r3, [r7, #11]
          break;
 80070ee:	e021      	b.n	8007134 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7c12      	ldrb	r2, [r2, #16]
 8007108:	f107 0108 	add.w	r1, r7, #8
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007112:	e00f      	b.n	8007134 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa30 	bl	800757c <USBD_CtlError>
            err++;
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	3301      	adds	r3, #1
 8007120:	72fb      	strb	r3, [r7, #11]
          break;
 8007122:	e007      	b.n	8007134 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa28 	bl	800757c <USBD_CtlError>
          err++;
 800712c:	7afb      	ldrb	r3, [r7, #11]
 800712e:	3301      	adds	r3, #1
 8007130:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007132:	bf00      	nop
      }
      break;
 8007134:	e037      	b.n	80071a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7c1b      	ldrb	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007146:	f107 0208 	add.w	r2, r7, #8
 800714a:	4610      	mov	r0, r2
 800714c:	4798      	blx	r3
 800714e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007150:	e029      	b.n	80071a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fa11 	bl	800757c <USBD_CtlError>
        err++;
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	3301      	adds	r3, #1
 800715e:	72fb      	strb	r3, [r7, #11]
      break;
 8007160:	e021      	b.n	80071a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7c1b      	ldrb	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	f107 0208 	add.w	r2, r7, #8
 8007176:	4610      	mov	r0, r2
 8007178:	4798      	blx	r3
 800717a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	2207      	movs	r2, #7
 8007182:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007184:	e00f      	b.n	80071a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f9f7 	bl	800757c <USBD_CtlError>
        err++;
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	3301      	adds	r3, #1
 8007192:	72fb      	strb	r3, [r7, #11]
      break;
 8007194:	e007      	b.n	80071a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f9ef 	bl	800757c <USBD_CtlError>
      err++;
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	3301      	adds	r3, #1
 80071a2:	72fb      	strb	r3, [r7, #11]
      break;
 80071a4:	bf00      	nop
  }

  if (err != 0U)
 80071a6:	7afb      	ldrb	r3, [r7, #11]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11e      	bne.n	80071ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	88db      	ldrh	r3, [r3, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d016      	beq.n	80071e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00e      	beq.n	80071d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	88da      	ldrh	r2, [r3, #6]
 80071be:	893b      	ldrh	r3, [r7, #8]
 80071c0:	4293      	cmp	r3, r2
 80071c2:	bf28      	it	cs
 80071c4:	4613      	movcs	r3, r2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071ca:	893b      	ldrh	r3, [r7, #8]
 80071cc:	461a      	mov	r2, r3
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa44 	bl	800765e <USBD_CtlSendData>
 80071d6:	e009      	b.n	80071ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9ce 	bl	800757c <USBD_CtlError>
 80071e0:	e004      	b.n	80071ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa78 	bl	80076d8 <USBD_CtlSendStatus>
 80071e8:	e000      	b.n	80071ec <USBD_GetDescriptor+0x320>
    return;
 80071ea:	bf00      	nop
  }
}
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop

080071f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	889b      	ldrh	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d131      	bne.n	800726a <USBD_SetAddress+0x76>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d12d      	bne.n	800726a <USBD_SetAddress+0x76>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	2b7f      	cmp	r3, #127	; 0x7f
 8007214:	d829      	bhi.n	800726a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	885b      	ldrh	r3, [r3, #2]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007220:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d104      	bne.n	8007238 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f9a3 	bl	800757c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	e01d      	b.n	8007274 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fed3 	bl	8007ff0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa44 	bl	80076d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725e:	e009      	b.n	8007274 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007268:	e004      	b.n	8007274 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f985 	bl	800757c <USBD_CtlError>
  }
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	885b      	ldrh	r3, [r3, #2]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	4b4c      	ldr	r3, [pc, #304]	; (80073c4 <USBD_SetConfig+0x148>)
 8007292:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007294:	4b4b      	ldr	r3, [pc, #300]	; (80073c4 <USBD_SetConfig+0x148>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d905      	bls.n	80072a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f96c 	bl	800757c <USBD_CtlError>
    return USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e088      	b.n	80073ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d002      	beq.n	80072ba <USBD_SetConfig+0x3e>
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d025      	beq.n	8007304 <USBD_SetConfig+0x88>
 80072b8:	e071      	b.n	800739e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80072ba:	4b42      	ldr	r3, [pc, #264]	; (80073c4 <USBD_SetConfig+0x148>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01c      	beq.n	80072fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80072c2:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <USBD_SetConfig+0x148>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072cc:	4b3d      	ldr	r3, [pc, #244]	; (80073c4 <USBD_SetConfig+0x148>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff f91e 	bl	8006514 <USBD_SetClassConfig>
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f949 	bl	800757c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ea:	e065      	b.n	80073b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f9f3 	bl	80076d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2203      	movs	r2, #3
 80072f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072fa:	e05d      	b.n	80073b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9eb 	bl	80076d8 <USBD_CtlSendStatus>
      break;
 8007302:	e059      	b.n	80073b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007304:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <USBD_SetConfig+0x148>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d112      	bne.n	8007332 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007314:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <USBD_SetConfig+0x148>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <USBD_SetConfig+0x148>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff f911 	bl	800654c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9d4 	bl	80076d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007330:	e042      	b.n	80073b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <USBD_SetConfig+0x148>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d02a      	beq.n	8007396 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff f8ff 	bl	800654c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800734e:	4b1d      	ldr	r3, [pc, #116]	; (80073c4 <USBD_SetConfig+0x148>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007358:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <USBD_SetConfig+0x148>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff f8d8 	bl	8006514 <USBD_SetClassConfig>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f903 	bl	800757c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff f8e4 	bl	800654c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800738c:	e014      	b.n	80073b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9a2 	bl	80076d8 <USBD_CtlSendStatus>
      break;
 8007394:	e010      	b.n	80073b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f99e 	bl	80076d8 <USBD_CtlSendStatus>
      break;
 800739c:	e00c      	b.n	80073b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f8eb 	bl	800757c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073a6:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <USBD_SetConfig+0x148>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff f8cd 	bl	800654c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80073b2:	2303      	movs	r3, #3
 80073b4:	73fb      	strb	r3, [r7, #15]
      break;
 80073b6:	bf00      	nop
  }

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000204 	.word	0x20000204

080073c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	88db      	ldrh	r3, [r3, #6]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d004      	beq.n	80073e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f8cd 	bl	800757c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073e2:	e023      	b.n	800742c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	dc02      	bgt.n	80073f6 <USBD_GetConfig+0x2e>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc03      	bgt.n	80073fc <USBD_GetConfig+0x34>
 80073f4:	e015      	b.n	8007422 <USBD_GetConfig+0x5a>
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d00b      	beq.n	8007412 <USBD_GetConfig+0x4a>
 80073fa:	e012      	b.n	8007422 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3308      	adds	r3, #8
 8007406:	2201      	movs	r2, #1
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f927 	bl	800765e <USBD_CtlSendData>
        break;
 8007410:	e00c      	b.n	800742c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3304      	adds	r3, #4
 8007416:	2201      	movs	r2, #1
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f91f 	bl	800765e <USBD_CtlSendData>
        break;
 8007420:	e004      	b.n	800742c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8a9 	bl	800757c <USBD_CtlError>
        break;
 800742a:	bf00      	nop
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007444:	b2db      	uxtb	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	2b02      	cmp	r3, #2
 800744a:	d81e      	bhi.n	800748a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	88db      	ldrh	r3, [r3, #6]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d004      	beq.n	800745e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f890 	bl	800757c <USBD_CtlError>
        break;
 800745c:	e01a      	b.n	8007494 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f043 0202 	orr.w	r2, r3, #2
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	330c      	adds	r3, #12
 800747e:	2202      	movs	r2, #2
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8eb 	bl	800765e <USBD_CtlSendData>
      break;
 8007488:	e004      	b.n	8007494 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f875 	bl	800757c <USBD_CtlError>
      break;
 8007492:	bf00      	nop
  }
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d106      	bne.n	80074bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f90e 	bl	80076d8 <USBD_CtlSendStatus>
  }
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d80b      	bhi.n	80074f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	885b      	ldrh	r3, [r3, #2]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10c      	bne.n	80074fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8f3 	bl	80076d8 <USBD_CtlSendStatus>
      }
      break;
 80074f2:	e004      	b.n	80074fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f840 	bl	800757c <USBD_CtlError>
      break;
 80074fc:	e000      	b.n	8007500 <USBD_ClrFeature+0x3c>
      break;
 80074fe:	bf00      	nop
  }
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fa91 	bl	8006a5a <SWAPBYTE>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fa84 	bl	8006a5a <SWAPBYTE>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3301      	adds	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff fa77 	bl	8006a5a <SWAPBYTE>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	80da      	strh	r2, [r3, #6]
}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007586:	2180      	movs	r1, #128	; 0x80
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fc99 	bl	8007ec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800758e:	2100      	movs	r1, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fc95 	bl	8007ec0 <USBD_LL_StallEP>
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b086      	sub	sp, #24
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d036      	beq.n	8007622 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075b8:	6938      	ldr	r0, [r7, #16]
 80075ba:	f000 f836 	bl	800762a <USBD_GetLen>
 80075be:	4603      	mov	r3, r0
 80075c0:	3301      	adds	r3, #1
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	3301      	adds	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	4413      	add	r3, r2
 80075e4:	2203      	movs	r2, #3
 80075e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	3301      	adds	r3, #1
 80075ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075ee:	e013      	b.n	8007618 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4413      	add	r3, r2
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	3301      	adds	r3, #1
 8007600:	613b      	str	r3, [r7, #16]
    idx++;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	3301      	adds	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
    idx++;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	3301      	adds	r3, #1
 8007616:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e7      	bne.n	80075f0 <USBD_GetString+0x52>
 8007620:	e000      	b.n	8007624 <USBD_GetString+0x86>
    return;
 8007622:	bf00      	nop
  }
}
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800763a:	e005      	b.n	8007648 <USBD_GetLen+0x1e>
  {
    len++;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	3301      	adds	r3, #1
 8007640:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	3301      	adds	r3, #1
 8007646:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f5      	bne.n	800763c <USBD_GetLen+0x12>
  }

  return len;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2202      	movs	r2, #2
 800766e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	2100      	movs	r1, #0
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fce9 	bl	800805c <USBD_LL_Transmit>

  return USBD_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	2100      	movs	r1, #0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fcd8 	bl	800805c <USBD_LL_Transmit>

  return USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	2100      	movs	r1, #0
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fcff 	bl	80080cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076e8:	2300      	movs	r3, #0
 80076ea:	2200      	movs	r2, #0
 80076ec:	2100      	movs	r1, #0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fcb4 	bl	800805c <USBD_LL_Transmit>

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2205      	movs	r2, #5
 800770a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800770e:	2300      	movs	r3, #0
 8007710:	2200      	movs	r2, #0
 8007712:	2100      	movs	r1, #0
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fcd9 	bl	80080cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007728:	2200      	movs	r2, #0
 800772a:	490e      	ldr	r1, [pc, #56]	; (8007764 <MX_USB_DEVICE_Init+0x40>)
 800772c:	480e      	ldr	r0, [pc, #56]	; (8007768 <MX_USB_DEVICE_Init+0x44>)
 800772e:	f7fe fe83 	bl	8006438 <USBD_Init>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007738:	f7f9 f9a4 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800773c:	490b      	ldr	r1, [pc, #44]	; (800776c <MX_USB_DEVICE_Init+0x48>)
 800773e:	480a      	ldr	r0, [pc, #40]	; (8007768 <MX_USB_DEVICE_Init+0x44>)
 8007740:	f7fe feaa 	bl	8006498 <USBD_RegisterClass>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800774a:	f7f9 f99b 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800774e:	4806      	ldr	r0, [pc, #24]	; (8007768 <MX_USB_DEVICE_Init+0x44>)
 8007750:	f7fe fec9 	bl	80064e6 <USBD_Start>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800775a:	f7f9 f993 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800775e:	bf00      	nop
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000114 	.word	0x20000114
 8007768:	20000378 	.word	0x20000378
 800776c:	2000000c 	.word	0x2000000c

08007770 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2212      	movs	r2, #18
 8007780:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	20000134 	.word	0x20000134

08007794 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2204      	movs	r2, #4
 80077a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077a6:	4b03      	ldr	r3, [pc, #12]	; (80077b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	20000154 	.word	0x20000154

080077b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d105      	bne.n	80077d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4907      	ldr	r1, [pc, #28]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
 80077ce:	4808      	ldr	r0, [pc, #32]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077d0:	f7ff fee5 	bl	800759e <USBD_GetString>
 80077d4:	e004      	b.n	80077e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	4904      	ldr	r1, [pc, #16]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
 80077da:	4805      	ldr	r0, [pc, #20]	; (80077f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80077dc:	f7ff fedf 	bl	800759e <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e0:	4b02      	ldr	r3, [pc, #8]	; (80077ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000648 	.word	0x20000648
 80077f0:	08008c90 	.word	0x08008c90

080077f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	4904      	ldr	r1, [pc, #16]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007804:	4804      	ldr	r0, [pc, #16]	; (8007818 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007806:	f7ff feca 	bl	800759e <USBD_GetString>
  return USBD_StrDesc;
 800780a:	4b02      	ldr	r3, [pc, #8]	; (8007814 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20000648 	.word	0x20000648
 8007818:	08008ca8 	.word	0x08008ca8

0800781c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	6039      	str	r1, [r7, #0]
 8007826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	221a      	movs	r2, #26
 800782c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800782e:	f000 f855 	bl	80078dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007832:	4b02      	ldr	r3, [pc, #8]	; (800783c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000158 	.word	0x20000158

08007840 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d105      	bne.n	800785e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	4907      	ldr	r1, [pc, #28]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007856:	4808      	ldr	r0, [pc, #32]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007858:	f7ff fea1 	bl	800759e <USBD_GetString>
 800785c:	e004      	b.n	8007868 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	4904      	ldr	r1, [pc, #16]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007862:	4805      	ldr	r0, [pc, #20]	; (8007878 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007864:	f7ff fe9b 	bl	800759e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007868:	4b02      	ldr	r3, [pc, #8]	; (8007874 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000648 	.word	0x20000648
 8007878:	08008cbc 	.word	0x08008cbc

0800787c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	6039      	str	r1, [r7, #0]
 8007886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4907      	ldr	r1, [pc, #28]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007892:	4808      	ldr	r0, [pc, #32]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007894:	f7ff fe83 	bl	800759e <USBD_GetString>
 8007898:	e004      	b.n	80078a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	4904      	ldr	r1, [pc, #16]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800789e:	4805      	ldr	r0, [pc, #20]	; (80078b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078a0:	f7ff fe7d 	bl	800759e <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a4:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000648 	.word	0x20000648
 80078b4:	08008cc8 	.word	0x08008cc8

080078b8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	220c      	movs	r2, #12
 80078c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80078ca:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	20000148 	.word	0x20000148

080078dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078e2:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <Get_SerialNum+0x44>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078e8:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <Get_SerialNum+0x48>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078ee:	4b0e      	ldr	r3, [pc, #56]	; (8007928 <Get_SerialNum+0x4c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4413      	add	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007902:	2208      	movs	r2, #8
 8007904:	4909      	ldr	r1, [pc, #36]	; (800792c <Get_SerialNum+0x50>)
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f814 	bl	8007934 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800790c:	2204      	movs	r2, #4
 800790e:	4908      	ldr	r1, [pc, #32]	; (8007930 <Get_SerialNum+0x54>)
 8007910:	68b8      	ldr	r0, [r7, #8]
 8007912:	f000 f80f 	bl	8007934 <IntToUnicode>
  }
}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	1fff7590 	.word	0x1fff7590
 8007924:	1fff7594 	.word	0x1fff7594
 8007928:	1fff7598 	.word	0x1fff7598
 800792c:	2000015a 	.word	0x2000015a
 8007930:	2000016a 	.word	0x2000016a

08007934 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]
 800794a:	e027      	b.n	800799c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	0f1b      	lsrs	r3, r3, #28
 8007950:	2b09      	cmp	r3, #9
 8007952:	d80b      	bhi.n	800796c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	0f1b      	lsrs	r3, r3, #28
 8007958:	b2da      	uxtb	r2, r3
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	4619      	mov	r1, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	440b      	add	r3, r1
 8007964:	3230      	adds	r2, #48	; 0x30
 8007966:	b2d2      	uxtb	r2, r2
 8007968:	701a      	strb	r2, [r3, #0]
 800796a:	e00a      	b.n	8007982 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	0f1b      	lsrs	r3, r3, #28
 8007970:	b2da      	uxtb	r2, r3
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4619      	mov	r1, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	440b      	add	r3, r1
 800797c:	3237      	adds	r2, #55	; 0x37
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	3301      	adds	r3, #1
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	3301      	adds	r3, #1
 800799a:	75fb      	strb	r3, [r7, #23]
 800799c:	7dfa      	ldrb	r2, [r7, #23]
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d3d3      	bcc.n	800794c <IntToUnicode+0x18>
  }
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
	...

080079b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b0ac      	sub	sp, #176	; 0xb0
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80079cc:	f107 0314 	add.w	r3, r7, #20
 80079d0:	2288      	movs	r2, #136	; 0x88
 80079d2:	2100      	movs	r1, #0
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fc47 	bl	8008268 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079e2:	d173      	bne.n	8007acc <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80079e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80079ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80079ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80079f2:	2301      	movs	r3, #1
 80079f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80079f6:	2301      	movs	r3, #1
 80079f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80079fa:	2318      	movs	r3, #24
 80079fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80079fe:	2307      	movs	r3, #7
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007a02:	2302      	movs	r3, #2
 8007a04:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007a06:	2302      	movs	r3, #2
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8007a0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a0e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a10:	f107 0314 	add.w	r3, r7, #20
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fb fbf1 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8007a20:	f7f9 f830 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a24:	4b2b      	ldr	r3, [pc, #172]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a28:	4a2a      	ldr	r2, [pc, #168]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a30:	4b28      	ldr	r3, [pc, #160]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a44:	2302      	movs	r3, #2
 8007a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a50:	2303      	movs	r3, #3
 8007a52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a56:	230a      	movs	r3, #10
 8007a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007a60:	4619      	mov	r1, r3
 8007a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a66:	f7f9 fb05 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a6a:	4b1a      	ldr	r3, [pc, #104]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	4a19      	ldr	r2, [pc, #100]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a76:	4b17      	ldr	r3, [pc, #92]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a82:	4b14      	ldr	r3, [pc, #80]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d114      	bne.n	8007ab8 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a92:	4a10      	ldr	r2, [pc, #64]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a98:	6593      	str	r3, [r2, #88]	; 0x58
 8007a9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa2:	60bb      	str	r3, [r7, #8]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8007aa6:	f7fa fd7b 	bl	80025a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <HAL_PCD_MspInit+0x120>)
 8007ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ab6:	e001      	b.n	8007abc <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8007ab8:	f7fa fd72 	bl	80025a0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007abc:	2200      	movs	r2, #0
 8007abe:	2100      	movs	r1, #0
 8007ac0:	2043      	movs	r0, #67	; 0x43
 8007ac2:	f7f9 faad 	bl	8001020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ac6:	2043      	movs	r0, #67	; 0x43
 8007ac8:	f7f9 fac6 	bl	8001058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007acc:	bf00      	nop
 8007ace:	37b0      	adds	r7, #176	; 0xb0
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40021000 	.word	0x40021000

08007ad8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7fe fd44 	bl	800657c <USBD_LL_SetupStage>
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	4613      	mov	r3, r2
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	4619      	mov	r1, r3
 8007b26:	f7fe fd7e 	bl	8006626 <USBD_LL_DataOutStage>
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b082      	sub	sp, #8
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	440b      	add	r3, r1
 8007b52:	3348      	adds	r3, #72	; 0x48
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7fe fdc7 	bl	80066ec <USBD_LL_DataInStage>
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fe fedb 	bl	8006930 <USBD_LL_SOF>
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d001      	beq.n	8007b9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b96:	f7f8 ff75 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ba0:	7bfa      	ldrb	r2, [r7, #15]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe fe85 	bl	80068b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fe31 	bl	8006818 <USBD_LL_Reset>
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe fe74 	bl	80068d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bf4:	4b04      	ldr	r3, [pc, #16]	; (8007c08 <HAL_PCD_SuspendCallback+0x48>)
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	4a03      	ldr	r2, [pc, #12]	; (8007c08 <HAL_PCD_SuspendCallback+0x48>)
 8007bfa:	f043 0306 	orr.w	r3, r3, #6
 8007bfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000ed00 	.word	0xe000ed00

08007c0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6812      	ldr	r2, [r2, #0]
 8007c22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c26:	f023 0301 	bic.w	r3, r3, #1
 8007c2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c34:	4b08      	ldr	r3, [pc, #32]	; (8007c58 <HAL_PCD_ResumeCallback+0x4c>)
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	4a07      	ldr	r2, [pc, #28]	; (8007c58 <HAL_PCD_ResumeCallback+0x4c>)
 8007c3a:	f023 0306 	bic.w	r3, r3, #6
 8007c3e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007c40:	f000 fae2 	bl	8008208 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fe58 	bl	8006900 <USBD_LL_Resume>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	e000ed00 	.word	0xe000ed00

08007c5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fea4 	bl	80069c0 <USBD_LL_IsoOUTIncomplete>
}
 8007c78:	bf00      	nop
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fe fe6c 	bl	8006974 <USBD_LL_IsoINIncomplete>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe feaa 	bl	8006a0c <USBD_LL_DevConnected>
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe fea7 	bl	8006a22 <USBD_LL_DevDisconnected>
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d13c      	bne.n	8007d66 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007cec:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <USBD_LL_Init+0x94>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <USBD_LL_Init+0x94>)
 8007cf8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cfc:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <USBD_LL_Init+0x94>)
 8007cfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007d04:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d06:	2206      	movs	r2, #6
 8007d08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d0a:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d10:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d12:	2202      	movs	r2, #2
 8007d14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d16:	4b16      	ldr	r3, [pc, #88]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d1c:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d22:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d3a:	480d      	ldr	r0, [pc, #52]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d3c:	f7f9 fb44 	bl	80013c8 <HAL_PCD_Init>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d46:	f7f8 fe9d 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d4a:	2180      	movs	r1, #128	; 0x80
 8007d4c:	4808      	ldr	r0, [pc, #32]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d4e:	f7fa fb8e 	bl	800246e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d52:	2240      	movs	r2, #64	; 0x40
 8007d54:	2100      	movs	r1, #0
 8007d56:	4806      	ldr	r0, [pc, #24]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d58:	f7fa fb42 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d5c:	2280      	movs	r2, #128	; 0x80
 8007d5e:	2101      	movs	r1, #1
 8007d60:	4803      	ldr	r0, [pc, #12]	; (8007d70 <USBD_LL_Init+0x94>)
 8007d62:	f7fa fb3d 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000848 	.word	0x20000848

08007d74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7f9 fc40 	bl	8001610 <HAL_PCD_Start>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d816      	bhi.n	8007dc8 <USBD_LL_Start+0x54>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <USBD_LL_Start+0x2c>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	08007db7 	.word	0x08007db7
 8007da8:	08007dbd 	.word	0x08007dbd
 8007dac:	08007dc3 	.word	0x08007dc3
    case HAL_OK :
      usb_status = USBD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
    break;
 8007db4:	e00b      	b.n	8007dce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007db6:	2303      	movs	r3, #3
 8007db8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dba:	e008      	b.n	8007dce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc0:	e005      	b.n	8007dce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc6:	e002      	b.n	8007dce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	73fb      	strb	r3, [r7, #15]
    break;
 8007dcc:	bf00      	nop
  }
  return usb_status;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	461a      	mov	r2, r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	70fb      	strb	r3, [r7, #3]
 8007dea:	460b      	mov	r3, r1
 8007dec:	70bb      	strb	r3, [r7, #2]
 8007dee:	4613      	mov	r3, r2
 8007df0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e00:	78bb      	ldrb	r3, [r7, #2]
 8007e02:	883a      	ldrh	r2, [r7, #0]
 8007e04:	78f9      	ldrb	r1, [r7, #3]
 8007e06:	f7f9 fffb 	bl	8001e00 <HAL_PCD_EP_Open>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d817      	bhi.n	8007e44 <USBD_LL_OpenEP+0x6c>
 8007e14:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <USBD_LL_OpenEP+0x44>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e33 	.word	0x08007e33
 8007e24:	08007e39 	.word	0x08007e39
 8007e28:	08007e3f 	.word	0x08007e3f
    case HAL_OK :
      usb_status = USBD_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e30:	e00b      	b.n	8007e4a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e32:	2303      	movs	r3, #3
 8007e34:	73fb      	strb	r3, [r7, #15]
    break;
 8007e36:	e008      	b.n	8007e4a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e3c:	e005      	b.n	8007e4a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	73fb      	strb	r3, [r7, #15]
    break;
 8007e42:	e002      	b.n	8007e4a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	73fb      	strb	r3, [r7, #15]
    break;
 8007e48:	bf00      	nop
  }
  return usb_status;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4611      	mov	r1, r2
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fa f82c 	bl	8001ed0 <HAL_PCD_EP_Close>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d816      	bhi.n	8007eb0 <USBD_LL_CloseEP+0x5c>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <USBD_LL_CloseEP+0x34>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007e99 	.word	0x08007e99
 8007e8c:	08007e9f 	.word	0x08007e9f
 8007e90:	08007ea5 	.word	0x08007ea5
 8007e94:	08007eab 	.word	0x08007eab
    case HAL_OK :
      usb_status = USBD_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e9c:	e00b      	b.n	8007eb6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea2:	e008      	b.n	8007eb6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ea8:	e005      	b.n	8007eb6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	73fb      	strb	r3, [r7, #15]
    break;
 8007eae:	e002      	b.n	8007eb6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb4:	bf00      	nop
  }
  return usb_status;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fa f8bb 	bl	800205a <HAL_PCD_EP_SetStall>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d816      	bhi.n	8007f1c <USBD_LL_StallEP+0x5c>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <USBD_LL_StallEP+0x34>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f05 	.word	0x08007f05
 8007ef8:	08007f0b 	.word	0x08007f0b
 8007efc:	08007f11 	.word	0x08007f11
 8007f00:	08007f17 	.word	0x08007f17
    case HAL_OK :
      usb_status = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
    break;
 8007f08:	e00b      	b.n	8007f22 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f0e:	e008      	b.n	8007f22 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
    break;
 8007f14:	e005      	b.n	8007f22 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f16:	2303      	movs	r3, #3
 8007f18:	73fb      	strb	r3, [r7, #15]
    break;
 8007f1a:	e002      	b.n	8007f22 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f20:	bf00      	nop
  }
  return usb_status;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fa f8e7 	bl	800211e <HAL_PCD_EP_ClrStall>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d816      	bhi.n	8007f88 <USBD_LL_ClearStallEP+0x5c>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <USBD_LL_ClearStallEP+0x34>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f71 	.word	0x08007f71
 8007f64:	08007f77 	.word	0x08007f77
 8007f68:	08007f7d 	.word	0x08007f7d
 8007f6c:	08007f83 	.word	0x08007f83
    case HAL_OK :
      usb_status = USBD_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
    break;
 8007f74:	e00b      	b.n	8007f8e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f76:	2303      	movs	r3, #3
 8007f78:	73fb      	strb	r3, [r7, #15]
    break;
 8007f7a:	e008      	b.n	8007f8e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f80:	e005      	b.n	8007f8e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f82:	2303      	movs	r3, #3
 8007f84:	73fb      	strb	r3, [r7, #15]
    break;
 8007f86:	e002      	b.n	8007f8e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f8c:	bf00      	nop
  }
  return usb_status;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007faa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	da0b      	bge.n	8007fcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	333e      	adds	r3, #62	; 0x3e
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	e00b      	b.n	8007fe4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7f9 fed1 	bl	8001db6 <HAL_PCD_SetAddress>
 8008014:	4603      	mov	r3, r0
 8008016:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	2b03      	cmp	r3, #3
 800801c:	d816      	bhi.n	800804c <USBD_LL_SetUSBAddress+0x5c>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <USBD_LL_SetUSBAddress+0x34>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	08008035 	.word	0x08008035
 8008028:	0800803b 	.word	0x0800803b
 800802c:	08008041 	.word	0x08008041
 8008030:	08008047 	.word	0x08008047
    case HAL_OK :
      usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
    break;
 8008038:	e00b      	b.n	8008052 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	73fb      	strb	r3, [r7, #15]
    break;
 800803e:	e008      	b.n	8008052 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008040:	2301      	movs	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
    break;
 8008044:	e005      	b.n	8008052 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	73fb      	strb	r3, [r7, #15]
    break;
 800804a:	e002      	b.n	8008052 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	73fb      	strb	r3, [r7, #15]
    break;
 8008050:	bf00      	nop
  }
  return usb_status;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	460b      	mov	r3, r1
 800806a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800807a:	7af9      	ldrb	r1, [r7, #11]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	f7f9 ffae 	bl	8001fe0 <HAL_PCD_EP_Transmit>
 8008084:	4603      	mov	r3, r0
 8008086:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008088:	7dbb      	ldrb	r3, [r7, #22]
 800808a:	2b03      	cmp	r3, #3
 800808c:	d816      	bhi.n	80080bc <USBD_LL_Transmit+0x60>
 800808e:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBD_LL_Transmit+0x38>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080ab 	.word	0x080080ab
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080b7 	.word	0x080080b7
    case HAL_OK :
      usb_status = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
    break;
 80080a8:	e00b      	b.n	80080c2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080aa:	2303      	movs	r3, #3
 80080ac:	75fb      	strb	r3, [r7, #23]
    break;
 80080ae:	e008      	b.n	80080c2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080b0:	2301      	movs	r3, #1
 80080b2:	75fb      	strb	r3, [r7, #23]
    break;
 80080b4:	e005      	b.n	80080c2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080b6:	2303      	movs	r3, #3
 80080b8:	75fb      	strb	r3, [r7, #23]
    break;
 80080ba:	e002      	b.n	80080c2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	75fb      	strb	r3, [r7, #23]
    break;
 80080c0:	bf00      	nop
  }
  return usb_status;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	460b      	mov	r3, r1
 80080da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080ea:	7af9      	ldrb	r1, [r7, #11]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	f7f9 ff38 	bl	8001f64 <HAL_PCD_EP_Receive>
 80080f4:	4603      	mov	r3, r0
 80080f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80080f8:	7dbb      	ldrb	r3, [r7, #22]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d816      	bhi.n	800812c <USBD_LL_PrepareReceive+0x60>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <USBD_LL_PrepareReceive+0x38>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008115 	.word	0x08008115
 8008108:	0800811b 	.word	0x0800811b
 800810c:	08008121 	.word	0x08008121
 8008110:	08008127 	.word	0x08008127
    case HAL_OK :
      usb_status = USBD_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	75fb      	strb	r3, [r7, #23]
    break;
 8008118:	e00b      	b.n	8008132 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800811a:	2303      	movs	r3, #3
 800811c:	75fb      	strb	r3, [r7, #23]
    break;
 800811e:	e008      	b.n	8008132 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
    break;
 8008124:	e005      	b.n	8008132 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008126:	2303      	movs	r3, #3
 8008128:	75fb      	strb	r3, [r7, #23]
    break;
 800812a:	e002      	b.n	8008132 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	75fb      	strb	r3, [r7, #23]
    break;
 8008130:	bf00      	nop
  }
  return usb_status;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_PCDEx_LPM_Callback+0x18>
 800814e:	2b01      	cmp	r3, #1
 8008150:	d01f      	beq.n	8008192 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008152:	e03b      	b.n	80081cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800815c:	f000 f854 	bl	8008208 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008166:	f023 0306 	bic.w	r3, r3, #6
 800816a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800817e:	f023 0301 	bic.w	r3, r3, #1
 8008182:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fbb8 	bl	8006900 <USBD_LL_Resume>
    break;
 8008190:	e01c      	b.n	80081cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6812      	ldr	r2, [r2, #0]
 80081a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fb8f 	bl	80068d4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80081c4:	f043 0306 	orr.w	r3, r3, #6
 80081c8:	6113      	str	r3, [r2, #16]
    break;
 80081ca:	bf00      	nop
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	e000ed00 	.word	0xe000ed00

080081d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <USBD_static_malloc+0x18>)
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000208 	.word	0x20000208

080081f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]

}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800820c:	f7f8 fb74 	bl	80008f8 <SystemClock_Config>
}
 8008210:	bf00      	nop
 8008212:	bd80      	pop	{r7, pc}

08008214 <__errno>:
 8008214:	4b01      	ldr	r3, [pc, #4]	; (800821c <__errno+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20000174 	.word	0x20000174

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4d0d      	ldr	r5, [pc, #52]	; (8008258 <__libc_init_array+0x38>)
 8008224:	4c0d      	ldr	r4, [pc, #52]	; (800825c <__libc_init_array+0x3c>)
 8008226:	1b64      	subs	r4, r4, r5
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	2600      	movs	r6, #0
 800822c:	42a6      	cmp	r6, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	4d0b      	ldr	r5, [pc, #44]	; (8008260 <__libc_init_array+0x40>)
 8008232:	4c0c      	ldr	r4, [pc, #48]	; (8008264 <__libc_init_array+0x44>)
 8008234:	f000 fcf0 	bl	8008c18 <_init>
 8008238:	1b64      	subs	r4, r4, r5
 800823a:	10a4      	asrs	r4, r4, #2
 800823c:	2600      	movs	r6, #0
 800823e:	42a6      	cmp	r6, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f855 3b04 	ldr.w	r3, [r5], #4
 8008248:	4798      	blx	r3
 800824a:	3601      	adds	r6, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008252:	4798      	blx	r3
 8008254:	3601      	adds	r6, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	08008e5c 	.word	0x08008e5c
 800825c:	08008e5c 	.word	0x08008e5c
 8008260:	08008e5c 	.word	0x08008e5c
 8008264:	08008e60 	.word	0x08008e60

08008268 <memset>:
 8008268:	4402      	add	r2, r0
 800826a:	4603      	mov	r3, r0
 800826c:	4293      	cmp	r3, r2
 800826e:	d100      	bne.n	8008272 <memset+0xa>
 8008270:	4770      	bx	lr
 8008272:	f803 1b01 	strb.w	r1, [r3], #1
 8008276:	e7f9      	b.n	800826c <memset+0x4>

08008278 <sniprintf>:
 8008278:	b40c      	push	{r2, r3}
 800827a:	b530      	push	{r4, r5, lr}
 800827c:	4b17      	ldr	r3, [pc, #92]	; (80082dc <sniprintf+0x64>)
 800827e:	1e0c      	subs	r4, r1, #0
 8008280:	681d      	ldr	r5, [r3, #0]
 8008282:	b09d      	sub	sp, #116	; 0x74
 8008284:	da08      	bge.n	8008298 <sniprintf+0x20>
 8008286:	238b      	movs	r3, #139	; 0x8b
 8008288:	602b      	str	r3, [r5, #0]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800828e:	b01d      	add	sp, #116	; 0x74
 8008290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008294:	b002      	add	sp, #8
 8008296:	4770      	bx	lr
 8008298:	f44f 7302 	mov.w	r3, #520	; 0x208
 800829c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082a0:	bf14      	ite	ne
 80082a2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80082a6:	4623      	moveq	r3, r4
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082b0:	9002      	str	r0, [sp, #8]
 80082b2:	9006      	str	r0, [sp, #24]
 80082b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082ba:	ab21      	add	r3, sp, #132	; 0x84
 80082bc:	a902      	add	r1, sp, #8
 80082be:	4628      	mov	r0, r5
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	f000 f8f7 	bl	80084b4 <_svfiprintf_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	bfbc      	itt	lt
 80082ca:	238b      	movlt	r3, #139	; 0x8b
 80082cc:	602b      	strlt	r3, [r5, #0]
 80082ce:	2c00      	cmp	r4, #0
 80082d0:	d0dd      	beq.n	800828e <sniprintf+0x16>
 80082d2:	9b02      	ldr	r3, [sp, #8]
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	e7d9      	b.n	800828e <sniprintf+0x16>
 80082da:	bf00      	nop
 80082dc:	20000174 	.word	0x20000174

080082e0 <_strtol_l.isra.0>:
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e6:	d001      	beq.n	80082ec <_strtol_l.isra.0+0xc>
 80082e8:	2b24      	cmp	r3, #36	; 0x24
 80082ea:	d906      	bls.n	80082fa <_strtol_l.isra.0+0x1a>
 80082ec:	f7ff ff92 	bl	8008214 <__errno>
 80082f0:	2316      	movs	r3, #22
 80082f2:	6003      	str	r3, [r0, #0]
 80082f4:	2000      	movs	r0, #0
 80082f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fa:	4f3a      	ldr	r7, [pc, #232]	; (80083e4 <_strtol_l.isra.0+0x104>)
 80082fc:	468e      	mov	lr, r1
 80082fe:	4676      	mov	r6, lr
 8008300:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008304:	5de5      	ldrb	r5, [r4, r7]
 8008306:	f015 0508 	ands.w	r5, r5, #8
 800830a:	d1f8      	bne.n	80082fe <_strtol_l.isra.0+0x1e>
 800830c:	2c2d      	cmp	r4, #45	; 0x2d
 800830e:	d134      	bne.n	800837a <_strtol_l.isra.0+0x9a>
 8008310:	f89e 4000 	ldrb.w	r4, [lr]
 8008314:	f04f 0801 	mov.w	r8, #1
 8008318:	f106 0e02 	add.w	lr, r6, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05c      	beq.n	80083da <_strtol_l.isra.0+0xfa>
 8008320:	2b10      	cmp	r3, #16
 8008322:	d10c      	bne.n	800833e <_strtol_l.isra.0+0x5e>
 8008324:	2c30      	cmp	r4, #48	; 0x30
 8008326:	d10a      	bne.n	800833e <_strtol_l.isra.0+0x5e>
 8008328:	f89e 4000 	ldrb.w	r4, [lr]
 800832c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008330:	2c58      	cmp	r4, #88	; 0x58
 8008332:	d14d      	bne.n	80083d0 <_strtol_l.isra.0+0xf0>
 8008334:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008338:	2310      	movs	r3, #16
 800833a:	f10e 0e02 	add.w	lr, lr, #2
 800833e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008342:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008346:	2600      	movs	r6, #0
 8008348:	fbbc f9f3 	udiv	r9, ip, r3
 800834c:	4635      	mov	r5, r6
 800834e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008352:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008356:	2f09      	cmp	r7, #9
 8008358:	d818      	bhi.n	800838c <_strtol_l.isra.0+0xac>
 800835a:	463c      	mov	r4, r7
 800835c:	42a3      	cmp	r3, r4
 800835e:	dd24      	ble.n	80083aa <_strtol_l.isra.0+0xca>
 8008360:	2e00      	cmp	r6, #0
 8008362:	db1f      	blt.n	80083a4 <_strtol_l.isra.0+0xc4>
 8008364:	45a9      	cmp	r9, r5
 8008366:	d31d      	bcc.n	80083a4 <_strtol_l.isra.0+0xc4>
 8008368:	d101      	bne.n	800836e <_strtol_l.isra.0+0x8e>
 800836a:	45a2      	cmp	sl, r4
 800836c:	db1a      	blt.n	80083a4 <_strtol_l.isra.0+0xc4>
 800836e:	fb05 4503 	mla	r5, r5, r3, r4
 8008372:	2601      	movs	r6, #1
 8008374:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008378:	e7eb      	b.n	8008352 <_strtol_l.isra.0+0x72>
 800837a:	2c2b      	cmp	r4, #43	; 0x2b
 800837c:	bf08      	it	eq
 800837e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008382:	46a8      	mov	r8, r5
 8008384:	bf08      	it	eq
 8008386:	f106 0e02 	addeq.w	lr, r6, #2
 800838a:	e7c7      	b.n	800831c <_strtol_l.isra.0+0x3c>
 800838c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008390:	2f19      	cmp	r7, #25
 8008392:	d801      	bhi.n	8008398 <_strtol_l.isra.0+0xb8>
 8008394:	3c37      	subs	r4, #55	; 0x37
 8008396:	e7e1      	b.n	800835c <_strtol_l.isra.0+0x7c>
 8008398:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800839c:	2f19      	cmp	r7, #25
 800839e:	d804      	bhi.n	80083aa <_strtol_l.isra.0+0xca>
 80083a0:	3c57      	subs	r4, #87	; 0x57
 80083a2:	e7db      	b.n	800835c <_strtol_l.isra.0+0x7c>
 80083a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80083a8:	e7e4      	b.n	8008374 <_strtol_l.isra.0+0x94>
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	da05      	bge.n	80083ba <_strtol_l.isra.0+0xda>
 80083ae:	2322      	movs	r3, #34	; 0x22
 80083b0:	6003      	str	r3, [r0, #0]
 80083b2:	4665      	mov	r5, ip
 80083b4:	b942      	cbnz	r2, 80083c8 <_strtol_l.isra.0+0xe8>
 80083b6:	4628      	mov	r0, r5
 80083b8:	e79d      	b.n	80082f6 <_strtol_l.isra.0+0x16>
 80083ba:	f1b8 0f00 	cmp.w	r8, #0
 80083be:	d000      	beq.n	80083c2 <_strtol_l.isra.0+0xe2>
 80083c0:	426d      	negs	r5, r5
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	d0f7      	beq.n	80083b6 <_strtol_l.isra.0+0xd6>
 80083c6:	b10e      	cbz	r6, 80083cc <_strtol_l.isra.0+0xec>
 80083c8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80083cc:	6011      	str	r1, [r2, #0]
 80083ce:	e7f2      	b.n	80083b6 <_strtol_l.isra.0+0xd6>
 80083d0:	2430      	movs	r4, #48	; 0x30
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1b3      	bne.n	800833e <_strtol_l.isra.0+0x5e>
 80083d6:	2308      	movs	r3, #8
 80083d8:	e7b1      	b.n	800833e <_strtol_l.isra.0+0x5e>
 80083da:	2c30      	cmp	r4, #48	; 0x30
 80083dc:	d0a4      	beq.n	8008328 <_strtol_l.isra.0+0x48>
 80083de:	230a      	movs	r3, #10
 80083e0:	e7ad      	b.n	800833e <_strtol_l.isra.0+0x5e>
 80083e2:	bf00      	nop
 80083e4:	08008d21 	.word	0x08008d21

080083e8 <strtol>:
 80083e8:	4613      	mov	r3, r2
 80083ea:	460a      	mov	r2, r1
 80083ec:	4601      	mov	r1, r0
 80083ee:	4802      	ldr	r0, [pc, #8]	; (80083f8 <strtol+0x10>)
 80083f0:	6800      	ldr	r0, [r0, #0]
 80083f2:	f7ff bf75 	b.w	80082e0 <_strtol_l.isra.0>
 80083f6:	bf00      	nop
 80083f8:	20000174 	.word	0x20000174

080083fc <__ssputs_r>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	688e      	ldr	r6, [r1, #8]
 8008402:	429e      	cmp	r6, r3
 8008404:	4682      	mov	sl, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4690      	mov	r8, r2
 800840a:	461f      	mov	r7, r3
 800840c:	d838      	bhi.n	8008480 <__ssputs_r+0x84>
 800840e:	898a      	ldrh	r2, [r1, #12]
 8008410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008414:	d032      	beq.n	800847c <__ssputs_r+0x80>
 8008416:	6825      	ldr	r5, [r4, #0]
 8008418:	6909      	ldr	r1, [r1, #16]
 800841a:	eba5 0901 	sub.w	r9, r5, r1
 800841e:	6965      	ldr	r5, [r4, #20]
 8008420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008428:	3301      	adds	r3, #1
 800842a:	444b      	add	r3, r9
 800842c:	106d      	asrs	r5, r5, #1
 800842e:	429d      	cmp	r5, r3
 8008430:	bf38      	it	cc
 8008432:	461d      	movcc	r5, r3
 8008434:	0553      	lsls	r3, r2, #21
 8008436:	d531      	bpl.n	800849c <__ssputs_r+0xa0>
 8008438:	4629      	mov	r1, r5
 800843a:	f000 fb47 	bl	8008acc <_malloc_r>
 800843e:	4606      	mov	r6, r0
 8008440:	b950      	cbnz	r0, 8008458 <__ssputs_r+0x5c>
 8008442:	230c      	movs	r3, #12
 8008444:	f8ca 3000 	str.w	r3, [sl]
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008458:	6921      	ldr	r1, [r4, #16]
 800845a:	464a      	mov	r2, r9
 800845c:	f000 fabe 	bl	80089dc <memcpy>
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800846a:	81a3      	strh	r3, [r4, #12]
 800846c:	6126      	str	r6, [r4, #16]
 800846e:	6165      	str	r5, [r4, #20]
 8008470:	444e      	add	r6, r9
 8008472:	eba5 0509 	sub.w	r5, r5, r9
 8008476:	6026      	str	r6, [r4, #0]
 8008478:	60a5      	str	r5, [r4, #8]
 800847a:	463e      	mov	r6, r7
 800847c:	42be      	cmp	r6, r7
 800847e:	d900      	bls.n	8008482 <__ssputs_r+0x86>
 8008480:	463e      	mov	r6, r7
 8008482:	4632      	mov	r2, r6
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	4641      	mov	r1, r8
 8008488:	f000 fab6 	bl	80089f8 <memmove>
 800848c:	68a3      	ldr	r3, [r4, #8]
 800848e:	6822      	ldr	r2, [r4, #0]
 8008490:	1b9b      	subs	r3, r3, r6
 8008492:	4432      	add	r2, r6
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	6022      	str	r2, [r4, #0]
 8008498:	2000      	movs	r0, #0
 800849a:	e7db      	b.n	8008454 <__ssputs_r+0x58>
 800849c:	462a      	mov	r2, r5
 800849e:	f000 fb6f 	bl	8008b80 <_realloc_r>
 80084a2:	4606      	mov	r6, r0
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d1e1      	bne.n	800846c <__ssputs_r+0x70>
 80084a8:	6921      	ldr	r1, [r4, #16]
 80084aa:	4650      	mov	r0, sl
 80084ac:	f000 fabe 	bl	8008a2c <_free_r>
 80084b0:	e7c7      	b.n	8008442 <__ssputs_r+0x46>
	...

080084b4 <_svfiprintf_r>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	4698      	mov	r8, r3
 80084ba:	898b      	ldrh	r3, [r1, #12]
 80084bc:	061b      	lsls	r3, r3, #24
 80084be:	b09d      	sub	sp, #116	; 0x74
 80084c0:	4607      	mov	r7, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	4614      	mov	r4, r2
 80084c6:	d50e      	bpl.n	80084e6 <_svfiprintf_r+0x32>
 80084c8:	690b      	ldr	r3, [r1, #16]
 80084ca:	b963      	cbnz	r3, 80084e6 <_svfiprintf_r+0x32>
 80084cc:	2140      	movs	r1, #64	; 0x40
 80084ce:	f000 fafd 	bl	8008acc <_malloc_r>
 80084d2:	6028      	str	r0, [r5, #0]
 80084d4:	6128      	str	r0, [r5, #16]
 80084d6:	b920      	cbnz	r0, 80084e2 <_svfiprintf_r+0x2e>
 80084d8:	230c      	movs	r3, #12
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084e0:	e0d1      	b.n	8008686 <_svfiprintf_r+0x1d2>
 80084e2:	2340      	movs	r3, #64	; 0x40
 80084e4:	616b      	str	r3, [r5, #20]
 80084e6:	2300      	movs	r3, #0
 80084e8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ea:	2320      	movs	r3, #32
 80084ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f4:	2330      	movs	r3, #48	; 0x30
 80084f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086a0 <_svfiprintf_r+0x1ec>
 80084fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084fe:	f04f 0901 	mov.w	r9, #1
 8008502:	4623      	mov	r3, r4
 8008504:	469a      	mov	sl, r3
 8008506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800850a:	b10a      	cbz	r2, 8008510 <_svfiprintf_r+0x5c>
 800850c:	2a25      	cmp	r2, #37	; 0x25
 800850e:	d1f9      	bne.n	8008504 <_svfiprintf_r+0x50>
 8008510:	ebba 0b04 	subs.w	fp, sl, r4
 8008514:	d00b      	beq.n	800852e <_svfiprintf_r+0x7a>
 8008516:	465b      	mov	r3, fp
 8008518:	4622      	mov	r2, r4
 800851a:	4629      	mov	r1, r5
 800851c:	4638      	mov	r0, r7
 800851e:	f7ff ff6d 	bl	80083fc <__ssputs_r>
 8008522:	3001      	adds	r0, #1
 8008524:	f000 80aa 	beq.w	800867c <_svfiprintf_r+0x1c8>
 8008528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800852a:	445a      	add	r2, fp
 800852c:	9209      	str	r2, [sp, #36]	; 0x24
 800852e:	f89a 3000 	ldrb.w	r3, [sl]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80a2 	beq.w	800867c <_svfiprintf_r+0x1c8>
 8008538:	2300      	movs	r3, #0
 800853a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800853e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008542:	f10a 0a01 	add.w	sl, sl, #1
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	9307      	str	r3, [sp, #28]
 800854a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800854e:	931a      	str	r3, [sp, #104]	; 0x68
 8008550:	4654      	mov	r4, sl
 8008552:	2205      	movs	r2, #5
 8008554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008558:	4851      	ldr	r0, [pc, #324]	; (80086a0 <_svfiprintf_r+0x1ec>)
 800855a:	f7f7 fe39 	bl	80001d0 <memchr>
 800855e:	9a04      	ldr	r2, [sp, #16]
 8008560:	b9d8      	cbnz	r0, 800859a <_svfiprintf_r+0xe6>
 8008562:	06d0      	lsls	r0, r2, #27
 8008564:	bf44      	itt	mi
 8008566:	2320      	movmi	r3, #32
 8008568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800856c:	0711      	lsls	r1, r2, #28
 800856e:	bf44      	itt	mi
 8008570:	232b      	movmi	r3, #43	; 0x2b
 8008572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008576:	f89a 3000 	ldrb.w	r3, [sl]
 800857a:	2b2a      	cmp	r3, #42	; 0x2a
 800857c:	d015      	beq.n	80085aa <_svfiprintf_r+0xf6>
 800857e:	9a07      	ldr	r2, [sp, #28]
 8008580:	4654      	mov	r4, sl
 8008582:	2000      	movs	r0, #0
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4621      	mov	r1, r4
 800858a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800858e:	3b30      	subs	r3, #48	; 0x30
 8008590:	2b09      	cmp	r3, #9
 8008592:	d94e      	bls.n	8008632 <_svfiprintf_r+0x17e>
 8008594:	b1b0      	cbz	r0, 80085c4 <_svfiprintf_r+0x110>
 8008596:	9207      	str	r2, [sp, #28]
 8008598:	e014      	b.n	80085c4 <_svfiprintf_r+0x110>
 800859a:	eba0 0308 	sub.w	r3, r0, r8
 800859e:	fa09 f303 	lsl.w	r3, r9, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	46a2      	mov	sl, r4
 80085a8:	e7d2      	b.n	8008550 <_svfiprintf_r+0x9c>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	1d19      	adds	r1, r3, #4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	9103      	str	r1, [sp, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfbb      	ittet	lt
 80085b6:	425b      	neglt	r3, r3
 80085b8:	f042 0202 	orrlt.w	r2, r2, #2
 80085bc:	9307      	strge	r3, [sp, #28]
 80085be:	9307      	strlt	r3, [sp, #28]
 80085c0:	bfb8      	it	lt
 80085c2:	9204      	strlt	r2, [sp, #16]
 80085c4:	7823      	ldrb	r3, [r4, #0]
 80085c6:	2b2e      	cmp	r3, #46	; 0x2e
 80085c8:	d10c      	bne.n	80085e4 <_svfiprintf_r+0x130>
 80085ca:	7863      	ldrb	r3, [r4, #1]
 80085cc:	2b2a      	cmp	r3, #42	; 0x2a
 80085ce:	d135      	bne.n	800863c <_svfiprintf_r+0x188>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	1d1a      	adds	r2, r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	9203      	str	r2, [sp, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfb8      	it	lt
 80085dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085e0:	3402      	adds	r4, #2
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086b0 <_svfiprintf_r+0x1fc>
 80085e8:	7821      	ldrb	r1, [r4, #0]
 80085ea:	2203      	movs	r2, #3
 80085ec:	4650      	mov	r0, sl
 80085ee:	f7f7 fdef 	bl	80001d0 <memchr>
 80085f2:	b140      	cbz	r0, 8008606 <_svfiprintf_r+0x152>
 80085f4:	2340      	movs	r3, #64	; 0x40
 80085f6:	eba0 000a 	sub.w	r0, r0, sl
 80085fa:	fa03 f000 	lsl.w	r0, r3, r0
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	4303      	orrs	r3, r0
 8008602:	3401      	adds	r4, #1
 8008604:	9304      	str	r3, [sp, #16]
 8008606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800860a:	4826      	ldr	r0, [pc, #152]	; (80086a4 <_svfiprintf_r+0x1f0>)
 800860c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008610:	2206      	movs	r2, #6
 8008612:	f7f7 fddd 	bl	80001d0 <memchr>
 8008616:	2800      	cmp	r0, #0
 8008618:	d038      	beq.n	800868c <_svfiprintf_r+0x1d8>
 800861a:	4b23      	ldr	r3, [pc, #140]	; (80086a8 <_svfiprintf_r+0x1f4>)
 800861c:	bb1b      	cbnz	r3, 8008666 <_svfiprintf_r+0x1b2>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	f023 0307 	bic.w	r3, r3, #7
 8008626:	3308      	adds	r3, #8
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862c:	4433      	add	r3, r6
 800862e:	9309      	str	r3, [sp, #36]	; 0x24
 8008630:	e767      	b.n	8008502 <_svfiprintf_r+0x4e>
 8008632:	fb0c 3202 	mla	r2, ip, r2, r3
 8008636:	460c      	mov	r4, r1
 8008638:	2001      	movs	r0, #1
 800863a:	e7a5      	b.n	8008588 <_svfiprintf_r+0xd4>
 800863c:	2300      	movs	r3, #0
 800863e:	3401      	adds	r4, #1
 8008640:	9305      	str	r3, [sp, #20]
 8008642:	4619      	mov	r1, r3
 8008644:	f04f 0c0a 	mov.w	ip, #10
 8008648:	4620      	mov	r0, r4
 800864a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800864e:	3a30      	subs	r2, #48	; 0x30
 8008650:	2a09      	cmp	r2, #9
 8008652:	d903      	bls.n	800865c <_svfiprintf_r+0x1a8>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0c5      	beq.n	80085e4 <_svfiprintf_r+0x130>
 8008658:	9105      	str	r1, [sp, #20]
 800865a:	e7c3      	b.n	80085e4 <_svfiprintf_r+0x130>
 800865c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008660:	4604      	mov	r4, r0
 8008662:	2301      	movs	r3, #1
 8008664:	e7f0      	b.n	8008648 <_svfiprintf_r+0x194>
 8008666:	ab03      	add	r3, sp, #12
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	462a      	mov	r2, r5
 800866c:	4b0f      	ldr	r3, [pc, #60]	; (80086ac <_svfiprintf_r+0x1f8>)
 800866e:	a904      	add	r1, sp, #16
 8008670:	4638      	mov	r0, r7
 8008672:	f3af 8000 	nop.w
 8008676:	1c42      	adds	r2, r0, #1
 8008678:	4606      	mov	r6, r0
 800867a:	d1d6      	bne.n	800862a <_svfiprintf_r+0x176>
 800867c:	89ab      	ldrh	r3, [r5, #12]
 800867e:	065b      	lsls	r3, r3, #25
 8008680:	f53f af2c 	bmi.w	80084dc <_svfiprintf_r+0x28>
 8008684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008686:	b01d      	add	sp, #116	; 0x74
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	ab03      	add	r3, sp, #12
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	462a      	mov	r2, r5
 8008692:	4b06      	ldr	r3, [pc, #24]	; (80086ac <_svfiprintf_r+0x1f8>)
 8008694:	a904      	add	r1, sp, #16
 8008696:	4638      	mov	r0, r7
 8008698:	f000 f87a 	bl	8008790 <_printf_i>
 800869c:	e7eb      	b.n	8008676 <_svfiprintf_r+0x1c2>
 800869e:	bf00      	nop
 80086a0:	08008e21 	.word	0x08008e21
 80086a4:	08008e2b 	.word	0x08008e2b
 80086a8:	00000000 	.word	0x00000000
 80086ac:	080083fd 	.word	0x080083fd
 80086b0:	08008e27 	.word	0x08008e27

080086b4 <_printf_common>:
 80086b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b8:	4616      	mov	r6, r2
 80086ba:	4699      	mov	r9, r3
 80086bc:	688a      	ldr	r2, [r1, #8]
 80086be:	690b      	ldr	r3, [r1, #16]
 80086c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086c4:	4293      	cmp	r3, r2
 80086c6:	bfb8      	it	lt
 80086c8:	4613      	movlt	r3, r2
 80086ca:	6033      	str	r3, [r6, #0]
 80086cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086d0:	4607      	mov	r7, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	b10a      	cbz	r2, 80086da <_printf_common+0x26>
 80086d6:	3301      	adds	r3, #1
 80086d8:	6033      	str	r3, [r6, #0]
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	0699      	lsls	r1, r3, #26
 80086de:	bf42      	ittt	mi
 80086e0:	6833      	ldrmi	r3, [r6, #0]
 80086e2:	3302      	addmi	r3, #2
 80086e4:	6033      	strmi	r3, [r6, #0]
 80086e6:	6825      	ldr	r5, [r4, #0]
 80086e8:	f015 0506 	ands.w	r5, r5, #6
 80086ec:	d106      	bne.n	80086fc <_printf_common+0x48>
 80086ee:	f104 0a19 	add.w	sl, r4, #25
 80086f2:	68e3      	ldr	r3, [r4, #12]
 80086f4:	6832      	ldr	r2, [r6, #0]
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	dc26      	bgt.n	800874a <_printf_common+0x96>
 80086fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008700:	1e13      	subs	r3, r2, #0
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	bf18      	it	ne
 8008706:	2301      	movne	r3, #1
 8008708:	0692      	lsls	r2, r2, #26
 800870a:	d42b      	bmi.n	8008764 <_printf_common+0xb0>
 800870c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008710:	4649      	mov	r1, r9
 8008712:	4638      	mov	r0, r7
 8008714:	47c0      	blx	r8
 8008716:	3001      	adds	r0, #1
 8008718:	d01e      	beq.n	8008758 <_printf_common+0xa4>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	68e5      	ldr	r5, [r4, #12]
 800871e:	6832      	ldr	r2, [r6, #0]
 8008720:	f003 0306 	and.w	r3, r3, #6
 8008724:	2b04      	cmp	r3, #4
 8008726:	bf08      	it	eq
 8008728:	1aad      	subeq	r5, r5, r2
 800872a:	68a3      	ldr	r3, [r4, #8]
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	bf0c      	ite	eq
 8008730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008734:	2500      	movne	r5, #0
 8008736:	4293      	cmp	r3, r2
 8008738:	bfc4      	itt	gt
 800873a:	1a9b      	subgt	r3, r3, r2
 800873c:	18ed      	addgt	r5, r5, r3
 800873e:	2600      	movs	r6, #0
 8008740:	341a      	adds	r4, #26
 8008742:	42b5      	cmp	r5, r6
 8008744:	d11a      	bne.n	800877c <_printf_common+0xc8>
 8008746:	2000      	movs	r0, #0
 8008748:	e008      	b.n	800875c <_printf_common+0xa8>
 800874a:	2301      	movs	r3, #1
 800874c:	4652      	mov	r2, sl
 800874e:	4649      	mov	r1, r9
 8008750:	4638      	mov	r0, r7
 8008752:	47c0      	blx	r8
 8008754:	3001      	adds	r0, #1
 8008756:	d103      	bne.n	8008760 <_printf_common+0xac>
 8008758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800875c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008760:	3501      	adds	r5, #1
 8008762:	e7c6      	b.n	80086f2 <_printf_common+0x3e>
 8008764:	18e1      	adds	r1, r4, r3
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	2030      	movs	r0, #48	; 0x30
 800876a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800876e:	4422      	add	r2, r4
 8008770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008778:	3302      	adds	r3, #2
 800877a:	e7c7      	b.n	800870c <_printf_common+0x58>
 800877c:	2301      	movs	r3, #1
 800877e:	4622      	mov	r2, r4
 8008780:	4649      	mov	r1, r9
 8008782:	4638      	mov	r0, r7
 8008784:	47c0      	blx	r8
 8008786:	3001      	adds	r0, #1
 8008788:	d0e6      	beq.n	8008758 <_printf_common+0xa4>
 800878a:	3601      	adds	r6, #1
 800878c:	e7d9      	b.n	8008742 <_printf_common+0x8e>
	...

08008790 <_printf_i>:
 8008790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	460c      	mov	r4, r1
 8008796:	4691      	mov	r9, r2
 8008798:	7e27      	ldrb	r7, [r4, #24]
 800879a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800879c:	2f78      	cmp	r7, #120	; 0x78
 800879e:	4680      	mov	r8, r0
 80087a0:	469a      	mov	sl, r3
 80087a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087a6:	d807      	bhi.n	80087b8 <_printf_i+0x28>
 80087a8:	2f62      	cmp	r7, #98	; 0x62
 80087aa:	d80a      	bhi.n	80087c2 <_printf_i+0x32>
 80087ac:	2f00      	cmp	r7, #0
 80087ae:	f000 80d8 	beq.w	8008962 <_printf_i+0x1d2>
 80087b2:	2f58      	cmp	r7, #88	; 0x58
 80087b4:	f000 80a3 	beq.w	80088fe <_printf_i+0x16e>
 80087b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087c0:	e03a      	b.n	8008838 <_printf_i+0xa8>
 80087c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087c6:	2b15      	cmp	r3, #21
 80087c8:	d8f6      	bhi.n	80087b8 <_printf_i+0x28>
 80087ca:	a001      	add	r0, pc, #4	; (adr r0, 80087d0 <_printf_i+0x40>)
 80087cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087d0:	08008829 	.word	0x08008829
 80087d4:	0800883d 	.word	0x0800883d
 80087d8:	080087b9 	.word	0x080087b9
 80087dc:	080087b9 	.word	0x080087b9
 80087e0:	080087b9 	.word	0x080087b9
 80087e4:	080087b9 	.word	0x080087b9
 80087e8:	0800883d 	.word	0x0800883d
 80087ec:	080087b9 	.word	0x080087b9
 80087f0:	080087b9 	.word	0x080087b9
 80087f4:	080087b9 	.word	0x080087b9
 80087f8:	080087b9 	.word	0x080087b9
 80087fc:	08008949 	.word	0x08008949
 8008800:	0800886d 	.word	0x0800886d
 8008804:	0800892b 	.word	0x0800892b
 8008808:	080087b9 	.word	0x080087b9
 800880c:	080087b9 	.word	0x080087b9
 8008810:	0800896b 	.word	0x0800896b
 8008814:	080087b9 	.word	0x080087b9
 8008818:	0800886d 	.word	0x0800886d
 800881c:	080087b9 	.word	0x080087b9
 8008820:	080087b9 	.word	0x080087b9
 8008824:	08008933 	.word	0x08008933
 8008828:	680b      	ldr	r3, [r1, #0]
 800882a:	1d1a      	adds	r2, r3, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	600a      	str	r2, [r1, #0]
 8008830:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008838:	2301      	movs	r3, #1
 800883a:	e0a3      	b.n	8008984 <_printf_i+0x1f4>
 800883c:	6825      	ldr	r5, [r4, #0]
 800883e:	6808      	ldr	r0, [r1, #0]
 8008840:	062e      	lsls	r6, r5, #24
 8008842:	f100 0304 	add.w	r3, r0, #4
 8008846:	d50a      	bpl.n	800885e <_printf_i+0xce>
 8008848:	6805      	ldr	r5, [r0, #0]
 800884a:	600b      	str	r3, [r1, #0]
 800884c:	2d00      	cmp	r5, #0
 800884e:	da03      	bge.n	8008858 <_printf_i+0xc8>
 8008850:	232d      	movs	r3, #45	; 0x2d
 8008852:	426d      	negs	r5, r5
 8008854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008858:	485e      	ldr	r0, [pc, #376]	; (80089d4 <_printf_i+0x244>)
 800885a:	230a      	movs	r3, #10
 800885c:	e019      	b.n	8008892 <_printf_i+0x102>
 800885e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008862:	6805      	ldr	r5, [r0, #0]
 8008864:	600b      	str	r3, [r1, #0]
 8008866:	bf18      	it	ne
 8008868:	b22d      	sxthne	r5, r5
 800886a:	e7ef      	b.n	800884c <_printf_i+0xbc>
 800886c:	680b      	ldr	r3, [r1, #0]
 800886e:	6825      	ldr	r5, [r4, #0]
 8008870:	1d18      	adds	r0, r3, #4
 8008872:	6008      	str	r0, [r1, #0]
 8008874:	0628      	lsls	r0, r5, #24
 8008876:	d501      	bpl.n	800887c <_printf_i+0xec>
 8008878:	681d      	ldr	r5, [r3, #0]
 800887a:	e002      	b.n	8008882 <_printf_i+0xf2>
 800887c:	0669      	lsls	r1, r5, #25
 800887e:	d5fb      	bpl.n	8008878 <_printf_i+0xe8>
 8008880:	881d      	ldrh	r5, [r3, #0]
 8008882:	4854      	ldr	r0, [pc, #336]	; (80089d4 <_printf_i+0x244>)
 8008884:	2f6f      	cmp	r7, #111	; 0x6f
 8008886:	bf0c      	ite	eq
 8008888:	2308      	moveq	r3, #8
 800888a:	230a      	movne	r3, #10
 800888c:	2100      	movs	r1, #0
 800888e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008892:	6866      	ldr	r6, [r4, #4]
 8008894:	60a6      	str	r6, [r4, #8]
 8008896:	2e00      	cmp	r6, #0
 8008898:	bfa2      	ittt	ge
 800889a:	6821      	ldrge	r1, [r4, #0]
 800889c:	f021 0104 	bicge.w	r1, r1, #4
 80088a0:	6021      	strge	r1, [r4, #0]
 80088a2:	b90d      	cbnz	r5, 80088a8 <_printf_i+0x118>
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	d04d      	beq.n	8008944 <_printf_i+0x1b4>
 80088a8:	4616      	mov	r6, r2
 80088aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80088ae:	fb03 5711 	mls	r7, r3, r1, r5
 80088b2:	5dc7      	ldrb	r7, [r0, r7]
 80088b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088b8:	462f      	mov	r7, r5
 80088ba:	42bb      	cmp	r3, r7
 80088bc:	460d      	mov	r5, r1
 80088be:	d9f4      	bls.n	80088aa <_printf_i+0x11a>
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d10b      	bne.n	80088dc <_printf_i+0x14c>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	07df      	lsls	r7, r3, #31
 80088c8:	d508      	bpl.n	80088dc <_printf_i+0x14c>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	6861      	ldr	r1, [r4, #4]
 80088ce:	4299      	cmp	r1, r3
 80088d0:	bfde      	ittt	le
 80088d2:	2330      	movle	r3, #48	; 0x30
 80088d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088d8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80088dc:	1b92      	subs	r2, r2, r6
 80088de:	6122      	str	r2, [r4, #16]
 80088e0:	f8cd a000 	str.w	sl, [sp]
 80088e4:	464b      	mov	r3, r9
 80088e6:	aa03      	add	r2, sp, #12
 80088e8:	4621      	mov	r1, r4
 80088ea:	4640      	mov	r0, r8
 80088ec:	f7ff fee2 	bl	80086b4 <_printf_common>
 80088f0:	3001      	adds	r0, #1
 80088f2:	d14c      	bne.n	800898e <_printf_i+0x1fe>
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f8:	b004      	add	sp, #16
 80088fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fe:	4835      	ldr	r0, [pc, #212]	; (80089d4 <_printf_i+0x244>)
 8008900:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	680e      	ldr	r6, [r1, #0]
 8008908:	061f      	lsls	r7, r3, #24
 800890a:	f856 5b04 	ldr.w	r5, [r6], #4
 800890e:	600e      	str	r6, [r1, #0]
 8008910:	d514      	bpl.n	800893c <_printf_i+0x1ac>
 8008912:	07d9      	lsls	r1, r3, #31
 8008914:	bf44      	itt	mi
 8008916:	f043 0320 	orrmi.w	r3, r3, #32
 800891a:	6023      	strmi	r3, [r4, #0]
 800891c:	b91d      	cbnz	r5, 8008926 <_printf_i+0x196>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	f023 0320 	bic.w	r3, r3, #32
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	2310      	movs	r3, #16
 8008928:	e7b0      	b.n	800888c <_printf_i+0xfc>
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	f043 0320 	orr.w	r3, r3, #32
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	2378      	movs	r3, #120	; 0x78
 8008934:	4828      	ldr	r0, [pc, #160]	; (80089d8 <_printf_i+0x248>)
 8008936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800893a:	e7e3      	b.n	8008904 <_printf_i+0x174>
 800893c:	065e      	lsls	r6, r3, #25
 800893e:	bf48      	it	mi
 8008940:	b2ad      	uxthmi	r5, r5
 8008942:	e7e6      	b.n	8008912 <_printf_i+0x182>
 8008944:	4616      	mov	r6, r2
 8008946:	e7bb      	b.n	80088c0 <_printf_i+0x130>
 8008948:	680b      	ldr	r3, [r1, #0]
 800894a:	6826      	ldr	r6, [r4, #0]
 800894c:	6960      	ldr	r0, [r4, #20]
 800894e:	1d1d      	adds	r5, r3, #4
 8008950:	600d      	str	r5, [r1, #0]
 8008952:	0635      	lsls	r5, r6, #24
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	d501      	bpl.n	800895c <_printf_i+0x1cc>
 8008958:	6018      	str	r0, [r3, #0]
 800895a:	e002      	b.n	8008962 <_printf_i+0x1d2>
 800895c:	0671      	lsls	r1, r6, #25
 800895e:	d5fb      	bpl.n	8008958 <_printf_i+0x1c8>
 8008960:	8018      	strh	r0, [r3, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	6123      	str	r3, [r4, #16]
 8008966:	4616      	mov	r6, r2
 8008968:	e7ba      	b.n	80088e0 <_printf_i+0x150>
 800896a:	680b      	ldr	r3, [r1, #0]
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	600a      	str	r2, [r1, #0]
 8008970:	681e      	ldr	r6, [r3, #0]
 8008972:	6862      	ldr	r2, [r4, #4]
 8008974:	2100      	movs	r1, #0
 8008976:	4630      	mov	r0, r6
 8008978:	f7f7 fc2a 	bl	80001d0 <memchr>
 800897c:	b108      	cbz	r0, 8008982 <_printf_i+0x1f2>
 800897e:	1b80      	subs	r0, r0, r6
 8008980:	6060      	str	r0, [r4, #4]
 8008982:	6863      	ldr	r3, [r4, #4]
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	2300      	movs	r3, #0
 8008988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800898c:	e7a8      	b.n	80088e0 <_printf_i+0x150>
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	4632      	mov	r2, r6
 8008992:	4649      	mov	r1, r9
 8008994:	4640      	mov	r0, r8
 8008996:	47d0      	blx	sl
 8008998:	3001      	adds	r0, #1
 800899a:	d0ab      	beq.n	80088f4 <_printf_i+0x164>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	079b      	lsls	r3, r3, #30
 80089a0:	d413      	bmi.n	80089ca <_printf_i+0x23a>
 80089a2:	68e0      	ldr	r0, [r4, #12]
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	4298      	cmp	r0, r3
 80089a8:	bfb8      	it	lt
 80089aa:	4618      	movlt	r0, r3
 80089ac:	e7a4      	b.n	80088f8 <_printf_i+0x168>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4632      	mov	r2, r6
 80089b2:	4649      	mov	r1, r9
 80089b4:	4640      	mov	r0, r8
 80089b6:	47d0      	blx	sl
 80089b8:	3001      	adds	r0, #1
 80089ba:	d09b      	beq.n	80088f4 <_printf_i+0x164>
 80089bc:	3501      	adds	r5, #1
 80089be:	68e3      	ldr	r3, [r4, #12]
 80089c0:	9903      	ldr	r1, [sp, #12]
 80089c2:	1a5b      	subs	r3, r3, r1
 80089c4:	42ab      	cmp	r3, r5
 80089c6:	dcf2      	bgt.n	80089ae <_printf_i+0x21e>
 80089c8:	e7eb      	b.n	80089a2 <_printf_i+0x212>
 80089ca:	2500      	movs	r5, #0
 80089cc:	f104 0619 	add.w	r6, r4, #25
 80089d0:	e7f5      	b.n	80089be <_printf_i+0x22e>
 80089d2:	bf00      	nop
 80089d4:	08008e32 	.word	0x08008e32
 80089d8:	08008e43 	.word	0x08008e43

080089dc <memcpy>:
 80089dc:	440a      	add	r2, r1
 80089de:	4291      	cmp	r1, r2
 80089e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80089e4:	d100      	bne.n	80089e8 <memcpy+0xc>
 80089e6:	4770      	bx	lr
 80089e8:	b510      	push	{r4, lr}
 80089ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089f2:	4291      	cmp	r1, r2
 80089f4:	d1f9      	bne.n	80089ea <memcpy+0xe>
 80089f6:	bd10      	pop	{r4, pc}

080089f8 <memmove>:
 80089f8:	4288      	cmp	r0, r1
 80089fa:	b510      	push	{r4, lr}
 80089fc:	eb01 0402 	add.w	r4, r1, r2
 8008a00:	d902      	bls.n	8008a08 <memmove+0x10>
 8008a02:	4284      	cmp	r4, r0
 8008a04:	4623      	mov	r3, r4
 8008a06:	d807      	bhi.n	8008a18 <memmove+0x20>
 8008a08:	1e43      	subs	r3, r0, #1
 8008a0a:	42a1      	cmp	r1, r4
 8008a0c:	d008      	beq.n	8008a20 <memmove+0x28>
 8008a0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a16:	e7f8      	b.n	8008a0a <memmove+0x12>
 8008a18:	4402      	add	r2, r0
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	428a      	cmp	r2, r1
 8008a1e:	d100      	bne.n	8008a22 <memmove+0x2a>
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a2a:	e7f7      	b.n	8008a1c <memmove+0x24>

08008a2c <_free_r>:
 8008a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a2e:	2900      	cmp	r1, #0
 8008a30:	d048      	beq.n	8008ac4 <_free_r+0x98>
 8008a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a36:	9001      	str	r0, [sp, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a3e:	bfb8      	it	lt
 8008a40:	18e4      	addlt	r4, r4, r3
 8008a42:	f000 f8d3 	bl	8008bec <__malloc_lock>
 8008a46:	4a20      	ldr	r2, [pc, #128]	; (8008ac8 <_free_r+0x9c>)
 8008a48:	9801      	ldr	r0, [sp, #4]
 8008a4a:	6813      	ldr	r3, [r2, #0]
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	b933      	cbnz	r3, 8008a5e <_free_r+0x32>
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	6014      	str	r4, [r2, #0]
 8008a54:	b003      	add	sp, #12
 8008a56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a5a:	f000 b8cd 	b.w	8008bf8 <__malloc_unlock>
 8008a5e:	42a3      	cmp	r3, r4
 8008a60:	d90b      	bls.n	8008a7a <_free_r+0x4e>
 8008a62:	6821      	ldr	r1, [r4, #0]
 8008a64:	1862      	adds	r2, r4, r1
 8008a66:	4293      	cmp	r3, r2
 8008a68:	bf04      	itt	eq
 8008a6a:	681a      	ldreq	r2, [r3, #0]
 8008a6c:	685b      	ldreq	r3, [r3, #4]
 8008a6e:	6063      	str	r3, [r4, #4]
 8008a70:	bf04      	itt	eq
 8008a72:	1852      	addeq	r2, r2, r1
 8008a74:	6022      	streq	r2, [r4, #0]
 8008a76:	602c      	str	r4, [r5, #0]
 8008a78:	e7ec      	b.n	8008a54 <_free_r+0x28>
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	b10b      	cbz	r3, 8008a84 <_free_r+0x58>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d9fa      	bls.n	8008a7a <_free_r+0x4e>
 8008a84:	6811      	ldr	r1, [r2, #0]
 8008a86:	1855      	adds	r5, r2, r1
 8008a88:	42a5      	cmp	r5, r4
 8008a8a:	d10b      	bne.n	8008aa4 <_free_r+0x78>
 8008a8c:	6824      	ldr	r4, [r4, #0]
 8008a8e:	4421      	add	r1, r4
 8008a90:	1854      	adds	r4, r2, r1
 8008a92:	42a3      	cmp	r3, r4
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	d1dd      	bne.n	8008a54 <_free_r+0x28>
 8008a98:	681c      	ldr	r4, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	6053      	str	r3, [r2, #4]
 8008a9e:	4421      	add	r1, r4
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	e7d7      	b.n	8008a54 <_free_r+0x28>
 8008aa4:	d902      	bls.n	8008aac <_free_r+0x80>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	e7d3      	b.n	8008a54 <_free_r+0x28>
 8008aac:	6825      	ldr	r5, [r4, #0]
 8008aae:	1961      	adds	r1, r4, r5
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	bf04      	itt	eq
 8008ab4:	6819      	ldreq	r1, [r3, #0]
 8008ab6:	685b      	ldreq	r3, [r3, #4]
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	bf04      	itt	eq
 8008abc:	1949      	addeq	r1, r1, r5
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	6054      	str	r4, [r2, #4]
 8008ac2:	e7c7      	b.n	8008a54 <_free_r+0x28>
 8008ac4:	b003      	add	sp, #12
 8008ac6:	bd30      	pop	{r4, r5, pc}
 8008ac8:	2000021c 	.word	0x2000021c

08008acc <_malloc_r>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	1ccd      	adds	r5, r1, #3
 8008ad0:	f025 0503 	bic.w	r5, r5, #3
 8008ad4:	3508      	adds	r5, #8
 8008ad6:	2d0c      	cmp	r5, #12
 8008ad8:	bf38      	it	cc
 8008ada:	250c      	movcc	r5, #12
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	4606      	mov	r6, r0
 8008ae0:	db01      	blt.n	8008ae6 <_malloc_r+0x1a>
 8008ae2:	42a9      	cmp	r1, r5
 8008ae4:	d903      	bls.n	8008aee <_malloc_r+0x22>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	2000      	movs	r0, #0
 8008aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aee:	f000 f87d 	bl	8008bec <__malloc_lock>
 8008af2:	4921      	ldr	r1, [pc, #132]	; (8008b78 <_malloc_r+0xac>)
 8008af4:	680a      	ldr	r2, [r1, #0]
 8008af6:	4614      	mov	r4, r2
 8008af8:	b99c      	cbnz	r4, 8008b22 <_malloc_r+0x56>
 8008afa:	4f20      	ldr	r7, [pc, #128]	; (8008b7c <_malloc_r+0xb0>)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	b923      	cbnz	r3, 8008b0a <_malloc_r+0x3e>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 f862 	bl	8008bcc <_sbrk_r>
 8008b08:	6038      	str	r0, [r7, #0]
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 f85d 	bl	8008bcc <_sbrk_r>
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	d123      	bne.n	8008b5e <_malloc_r+0x92>
 8008b16:	230c      	movs	r3, #12
 8008b18:	6033      	str	r3, [r6, #0]
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f000 f86c 	bl	8008bf8 <__malloc_unlock>
 8008b20:	e7e3      	b.n	8008aea <_malloc_r+0x1e>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	1b5b      	subs	r3, r3, r5
 8008b26:	d417      	bmi.n	8008b58 <_malloc_r+0x8c>
 8008b28:	2b0b      	cmp	r3, #11
 8008b2a:	d903      	bls.n	8008b34 <_malloc_r+0x68>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	441c      	add	r4, r3
 8008b30:	6025      	str	r5, [r4, #0]
 8008b32:	e004      	b.n	8008b3e <_malloc_r+0x72>
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	42a2      	cmp	r2, r4
 8008b38:	bf0c      	ite	eq
 8008b3a:	600b      	streq	r3, [r1, #0]
 8008b3c:	6053      	strne	r3, [r2, #4]
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f000 f85a 	bl	8008bf8 <__malloc_unlock>
 8008b44:	f104 000b 	add.w	r0, r4, #11
 8008b48:	1d23      	adds	r3, r4, #4
 8008b4a:	f020 0007 	bic.w	r0, r0, #7
 8008b4e:	1ac2      	subs	r2, r0, r3
 8008b50:	d0cc      	beq.n	8008aec <_malloc_r+0x20>
 8008b52:	1a1b      	subs	r3, r3, r0
 8008b54:	50a3      	str	r3, [r4, r2]
 8008b56:	e7c9      	b.n	8008aec <_malloc_r+0x20>
 8008b58:	4622      	mov	r2, r4
 8008b5a:	6864      	ldr	r4, [r4, #4]
 8008b5c:	e7cc      	b.n	8008af8 <_malloc_r+0x2c>
 8008b5e:	1cc4      	adds	r4, r0, #3
 8008b60:	f024 0403 	bic.w	r4, r4, #3
 8008b64:	42a0      	cmp	r0, r4
 8008b66:	d0e3      	beq.n	8008b30 <_malloc_r+0x64>
 8008b68:	1a21      	subs	r1, r4, r0
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f000 f82e 	bl	8008bcc <_sbrk_r>
 8008b70:	3001      	adds	r0, #1
 8008b72:	d1dd      	bne.n	8008b30 <_malloc_r+0x64>
 8008b74:	e7cf      	b.n	8008b16 <_malloc_r+0x4a>
 8008b76:	bf00      	nop
 8008b78:	2000021c 	.word	0x2000021c
 8008b7c:	20000220 	.word	0x20000220

08008b80 <_realloc_r>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	4607      	mov	r7, r0
 8008b84:	4614      	mov	r4, r2
 8008b86:	460e      	mov	r6, r1
 8008b88:	b921      	cbnz	r1, 8008b94 <_realloc_r+0x14>
 8008b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b8e:	4611      	mov	r1, r2
 8008b90:	f7ff bf9c 	b.w	8008acc <_malloc_r>
 8008b94:	b922      	cbnz	r2, 8008ba0 <_realloc_r+0x20>
 8008b96:	f7ff ff49 	bl	8008a2c <_free_r>
 8008b9a:	4625      	mov	r5, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba0:	f000 f830 	bl	8008c04 <_malloc_usable_size_r>
 8008ba4:	42a0      	cmp	r0, r4
 8008ba6:	d20f      	bcs.n	8008bc8 <_realloc_r+0x48>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	4638      	mov	r0, r7
 8008bac:	f7ff ff8e 	bl	8008acc <_malloc_r>
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d0f2      	beq.n	8008b9c <_realloc_r+0x1c>
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4622      	mov	r2, r4
 8008bba:	f7ff ff0f 	bl	80089dc <memcpy>
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	f7ff ff33 	bl	8008a2c <_free_r>
 8008bc6:	e7e9      	b.n	8008b9c <_realloc_r+0x1c>
 8008bc8:	4635      	mov	r5, r6
 8008bca:	e7e7      	b.n	8008b9c <_realloc_r+0x1c>

08008bcc <_sbrk_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d06      	ldr	r5, [pc, #24]	; (8008be8 <_sbrk_r+0x1c>)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	f7f8 f874 	bl	8000cc4 <_sbrk>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_sbrk_r+0x1a>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_sbrk_r+0x1a>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20000c50 	.word	0x20000c50

08008bec <__malloc_lock>:
 8008bec:	4801      	ldr	r0, [pc, #4]	; (8008bf4 <__malloc_lock+0x8>)
 8008bee:	f000 b811 	b.w	8008c14 <__retarget_lock_acquire_recursive>
 8008bf2:	bf00      	nop
 8008bf4:	20000c58 	.word	0x20000c58

08008bf8 <__malloc_unlock>:
 8008bf8:	4801      	ldr	r0, [pc, #4]	; (8008c00 <__malloc_unlock+0x8>)
 8008bfa:	f000 b80c 	b.w	8008c16 <__retarget_lock_release_recursive>
 8008bfe:	bf00      	nop
 8008c00:	20000c58 	.word	0x20000c58

08008c04 <_malloc_usable_size_r>:
 8008c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c08:	1f18      	subs	r0, r3, #4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	bfbc      	itt	lt
 8008c0e:	580b      	ldrlt	r3, [r1, r0]
 8008c10:	18c0      	addlt	r0, r0, r3
 8008c12:	4770      	bx	lr

08008c14 <__retarget_lock_acquire_recursive>:
 8008c14:	4770      	bx	lr

08008c16 <__retarget_lock_release_recursive>:
 8008c16:	4770      	bx	lr

08008c18 <_init>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr

08008c24 <_fini>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	bf00      	nop
 8008c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2a:	bc08      	pop	{r3}
 8008c2c:	469e      	mov	lr, r3
 8008c2e:	4770      	bx	lr
